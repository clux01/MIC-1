-- VHDL Entity IP006_lib.IP006_uart_reg32.symbol
--
-- Created:
--          by - lamplpat.UNKNOWN (M00159)
--          at - 14:07:05 19.03.2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.2 (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.numeric_std.all;

ENTITY IP006_uart_reg32 IS
   GENERIC( 
      inputs_g        : integer := 16;
      outputs_g       : integer := 16;
      core_clk_freq_g : integer := 100000000;
      baudrate_g      : integer := 115200;
      simulate0_g     : boolean := false;
      simulate1_g     : boolean := false;
      commandfile_g   : string  := "command.txt";      -- 
      mbus_pipe_g     : integer := 1;
      reg_pipe_out_g  : integer := 0;
      use_vectors     : boolean := false;
      reg_pipe_in_g   : integer := 0
   );
   PORT( 
      clk            : IN     std_logic;
      reg100         : IN     std_logic_vector (31 DOWNTO 0);
      reg101         : IN     std_logic_vector (31 DOWNTO 0);
      reg102         : IN     std_logic_vector (31 DOWNTO 0);
      reg103         : IN     std_logic_vector (31 DOWNTO 0);
      reg104         : IN     std_logic_vector (31 DOWNTO 0);
      reg105         : IN     std_logic_vector (31 DOWNTO 0);
      reg106         : IN     std_logic_vector (31 DOWNTO 0);
      reg107         : IN     std_logic_vector (31 DOWNTO 0);
      reg108         : IN     std_logic_vector (31 DOWNTO 0);
      reg109         : IN     std_logic_vector (31 DOWNTO 0);
      reg10A         : IN     std_logic_vector (31 DOWNTO 0);
      reg10B         : IN     std_logic_vector (31 DOWNTO 0);
      reg10C         : IN     std_logic_vector (31 DOWNTO 0);
      reg10D         : IN     std_logic_vector (31 DOWNTO 0);
      reg10E         : IN     std_logic_vector (31 DOWNTO 0);
      reg10F         : IN     std_logic_vector (31 DOWNTO 0);
      reg110         : IN     std_logic_vector (31 DOWNTO 0);
      reg111         : IN     std_logic_vector (31 DOWNTO 0);
      reg112         : IN     std_logic_vector (31 DOWNTO 0);
      reg113         : IN     std_logic_vector (31 DOWNTO 0);
      reg114         : IN     std_logic_vector (31 DOWNTO 0);
      reg115         : IN     std_logic_vector (31 DOWNTO 0);
      reg116         : IN     std_logic_vector (31 DOWNTO 0);
      reg117         : IN     std_logic_vector (31 DOWNTO 0);
      reg118         : IN     std_logic_vector (31 DOWNTO 0);
      reg119         : IN     std_logic_vector (31 DOWNTO 0);
      reg11A         : IN     std_logic_vector (31 DOWNTO 0);
      reg11B         : IN     std_logic_vector (31 DOWNTO 0);
      reg11C         : IN     std_logic_vector (31 DOWNTO 0);
      reg11D         : IN     std_logic_vector (31 DOWNTO 0);
      reg11E         : IN     std_logic_vector (31 DOWNTO 0);
      reg11F         : IN     std_logic_vector (31 DOWNTO 0);
      reg120         : IN     std_logic_vector (31 DOWNTO 0);
      reg121         : IN     std_logic_vector (31 DOWNTO 0);
      reg122         : IN     std_logic_vector (31 DOWNTO 0);
      reg123         : IN     std_logic_vector (31 DOWNTO 0);
      reg124         : IN     std_logic_vector (31 DOWNTO 0);
      reg125         : IN     std_logic_vector (31 DOWNTO 0);
      reg126         : IN     std_logic_vector (31 DOWNTO 0);
      reg127         : IN     std_logic_vector (31 DOWNTO 0);
      reg128         : IN     std_logic_vector (31 DOWNTO 0);
      reg129         : IN     std_logic_vector (31 DOWNTO 0);
      reg12A         : IN     std_logic_vector (31 DOWNTO 0);
      reg12B         : IN     std_logic_vector (31 DOWNTO 0);
      reg12C         : IN     std_logic_vector (31 DOWNTO 0);
      reg12D         : IN     std_logic_vector (31 DOWNTO 0);
      reg12E         : IN     std_logic_vector (31 DOWNTO 0);
      reg12F         : IN     std_logic_vector (31 DOWNTO 0);
      reg130         : IN     std_logic_vector (31 DOWNTO 0);
      reg131         : IN     std_logic_vector (31 DOWNTO 0);
      reg132         : IN     std_logic_vector (31 DOWNTO 0);
      reg133         : IN     std_logic_vector (31 DOWNTO 0);
      reg134         : IN     std_logic_vector (31 DOWNTO 0);
      reg135         : IN     std_logic_vector (31 DOWNTO 0);
      reg136         : IN     std_logic_vector (31 DOWNTO 0);
      reg137         : IN     std_logic_vector (31 DOWNTO 0);
      reg138         : IN     std_logic_vector (31 DOWNTO 0);
      reg139         : IN     std_logic_vector (31 DOWNTO 0);
      reg13A         : IN     std_logic_vector (31 DOWNTO 0);
      reg13B         : IN     std_logic_vector (31 DOWNTO 0);
      reg13C         : IN     std_logic_vector (31 DOWNTO 0);
      reg13D         : IN     std_logic_vector (31 DOWNTO 0);
      reg13E         : IN     std_logic_vector (31 DOWNTO 0);
      reg13F         : IN     std_logic_vector (31 DOWNTO 0);
      reg140         : IN     std_logic_vector (31 DOWNTO 0);
      reg141         : IN     std_logic_vector (31 DOWNTO 0);
      reg142         : IN     std_logic_vector (31 DOWNTO 0);
      reg143         : IN     std_logic_vector (31 DOWNTO 0);
      reg144         : IN     std_logic_vector (31 DOWNTO 0);
      reg145         : IN     std_logic_vector (31 DOWNTO 0);
      reg146         : IN     std_logic_vector (31 DOWNTO 0);
      reg147         : IN     std_logic_vector (31 DOWNTO 0);
      reg148         : IN     std_logic_vector (31 DOWNTO 0);
      reg149         : IN     std_logic_vector (31 DOWNTO 0);
      reg14A         : IN     std_logic_vector (31 DOWNTO 0);
      reg14B         : IN     std_logic_vector (31 DOWNTO 0);
      reg14C         : IN     std_logic_vector (31 DOWNTO 0);
      reg14D         : IN     std_logic_vector (31 DOWNTO 0);
      reg14E         : IN     std_logic_vector (31 DOWNTO 0);
      reg14F         : IN     std_logic_vector (31 DOWNTO 0);
      reg150         : IN     std_logic_vector (31 DOWNTO 0);
      reg151         : IN     std_logic_vector (31 DOWNTO 0);
      reg152         : IN     std_logic_vector (31 DOWNTO 0);
      reg153         : IN     std_logic_vector (31 DOWNTO 0);
      reg154         : IN     std_logic_vector (31 DOWNTO 0);
      reg155         : IN     std_logic_vector (31 DOWNTO 0);
      reg156         : IN     std_logic_vector (31 DOWNTO 0);
      reg157         : IN     std_logic_vector (31 DOWNTO 0);
      reg158         : IN     std_logic_vector (31 DOWNTO 0);
      reg159         : IN     std_logic_vector (31 DOWNTO 0);
      reg15A         : IN     std_logic_vector (31 DOWNTO 0);
      reg15B         : IN     std_logic_vector (31 DOWNTO 0);
      reg15C         : IN     std_logic_vector (31 DOWNTO 0);
      reg15D         : IN     std_logic_vector (31 DOWNTO 0);
      reg15E         : IN     std_logic_vector (31 DOWNTO 0);
      reg15F         : IN     std_logic_vector (31 DOWNTO 0);
      reg160         : IN     std_logic_vector (31 DOWNTO 0);
      reg161         : IN     std_logic_vector (31 DOWNTO 0);
      reg162         : IN     std_logic_vector (31 DOWNTO 0);
      reg163         : IN     std_logic_vector (31 DOWNTO 0);
      reg164         : IN     std_logic_vector (31 DOWNTO 0);
      reg165         : IN     std_logic_vector (31 DOWNTO 0);
      reg166         : IN     std_logic_vector (31 DOWNTO 0);
      reg167         : IN     std_logic_vector (31 DOWNTO 0);
      reg168         : IN     std_logic_vector (31 DOWNTO 0);
      reg169         : IN     std_logic_vector (31 DOWNTO 0);
      reg16A         : IN     std_logic_vector (31 DOWNTO 0);
      reg16B         : IN     std_logic_vector (31 DOWNTO 0);
      reg16C         : IN     std_logic_vector (31 DOWNTO 0);
      reg16D         : IN     std_logic_vector (31 DOWNTO 0);
      reg16E         : IN     std_logic_vector (31 DOWNTO 0);
      reg16F         : IN     std_logic_vector (31 DOWNTO 0);
      reg170         : IN     std_logic_vector (31 DOWNTO 0);
      reg171         : IN     std_logic_vector (31 DOWNTO 0);
      reg172         : IN     std_logic_vector (31 DOWNTO 0);
      reg173         : IN     std_logic_vector (31 DOWNTO 0);
      reg174         : IN     std_logic_vector (31 DOWNTO 0);
      reg175         : IN     std_logic_vector (31 DOWNTO 0);
      reg176         : IN     std_logic_vector (31 DOWNTO 0);
      reg177         : IN     std_logic_vector (31 DOWNTO 0);
      reg178         : IN     std_logic_vector (31 DOWNTO 0);
      reg179         : IN     std_logic_vector (31 DOWNTO 0);
      reg17A         : IN     std_logic_vector (31 DOWNTO 0);
      reg17B         : IN     std_logic_vector (31 DOWNTO 0);
      reg17C         : IN     std_logic_vector (31 DOWNTO 0);
      reg17D         : IN     std_logic_vector (31 DOWNTO 0);
      reg17E         : IN     std_logic_vector (31 DOWNTO 0);
      reg17F         : IN     std_logic_vector (31 DOWNTO 0);
      reg180         : IN     std_logic_vector (31 DOWNTO 0);
      reg181         : IN     std_logic_vector (31 DOWNTO 0);
      reg182         : IN     std_logic_vector (31 DOWNTO 0);
      reg183         : IN     std_logic_vector (31 DOWNTO 0);
      reg184         : IN     std_logic_vector (31 DOWNTO 0);
      reg185         : IN     std_logic_vector (31 DOWNTO 0);
      reg186         : IN     std_logic_vector (31 DOWNTO 0);
      reg187         : IN     std_logic_vector (31 DOWNTO 0);
      reg188         : IN     std_logic_vector (31 DOWNTO 0);
      reg189         : IN     std_logic_vector (31 DOWNTO 0);
      reg18A         : IN     std_logic_vector (31 DOWNTO 0);
      reg18B         : IN     std_logic_vector (31 DOWNTO 0);
      reg18C         : IN     std_logic_vector (31 DOWNTO 0);
      reg18D         : IN     std_logic_vector (31 DOWNTO 0);
      reg18E         : IN     std_logic_vector (31 DOWNTO 0);
      reg18F         : IN     std_logic_vector (31 DOWNTO 0);
      reg190         : IN     std_logic_vector (31 DOWNTO 0);
      reg191         : IN     std_logic_vector (31 DOWNTO 0);
      reg192         : IN     std_logic_vector (31 DOWNTO 0);
      reg193         : IN     std_logic_vector (31 DOWNTO 0);
      reg194         : IN     std_logic_vector (31 DOWNTO 0);
      reg195         : IN     std_logic_vector (31 DOWNTO 0);
      reg196         : IN     std_logic_vector (31 DOWNTO 0);
      reg197         : IN     std_logic_vector (31 DOWNTO 0);
      reg198         : IN     std_logic_vector (31 DOWNTO 0);
      reg199         : IN     std_logic_vector (31 DOWNTO 0);
      reg19A         : IN     std_logic_vector (31 DOWNTO 0);
      reg19B         : IN     std_logic_vector (31 DOWNTO 0);
      reg19C         : IN     std_logic_vector (31 DOWNTO 0);
      reg19D         : IN     std_logic_vector (31 DOWNTO 0);
      reg19E         : IN     std_logic_vector (31 DOWNTO 0);
      reg19F         : IN     std_logic_vector (31 DOWNTO 0);
      reg1A0         : IN     std_logic_vector (31 DOWNTO 0);
      reg1A1         : IN     std_logic_vector (31 DOWNTO 0);
      reg1A2         : IN     std_logic_vector (31 DOWNTO 0);
      reg1A3         : IN     std_logic_vector (31 DOWNTO 0);
      reg1A4         : IN     std_logic_vector (31 DOWNTO 0);
      reg1A5         : IN     std_logic_vector (31 DOWNTO 0);
      reg1A6         : IN     std_logic_vector (31 DOWNTO 0);
      reg1A7         : IN     std_logic_vector (31 DOWNTO 0);
      reg1A8         : IN     std_logic_vector (31 DOWNTO 0);
      reg1A9         : IN     std_logic_vector (31 DOWNTO 0);
      reg1AA         : IN     std_logic_vector (31 DOWNTO 0);
      reg1AB         : IN     std_logic_vector (31 DOWNTO 0);
      reg1AC         : IN     std_logic_vector (31 DOWNTO 0);
      reg1AD         : IN     std_logic_vector (31 DOWNTO 0);
      reg1AE         : IN     std_logic_vector (31 DOWNTO 0);
      reg1AF         : IN     std_logic_vector (31 DOWNTO 0);
      reg1B0         : IN     std_logic_vector (31 DOWNTO 0);
      reg1B1         : IN     std_logic_vector (31 DOWNTO 0);
      reg1B2         : IN     std_logic_vector (31 DOWNTO 0);
      reg1B3         : IN     std_logic_vector (31 DOWNTO 0);
      reg1B4         : IN     std_logic_vector (31 DOWNTO 0);
      reg1B5         : IN     std_logic_vector (31 DOWNTO 0);
      reg1B6         : IN     std_logic_vector (31 DOWNTO 0);
      reg1B7         : IN     std_logic_vector (31 DOWNTO 0);
      reg1B8         : IN     std_logic_vector (31 DOWNTO 0);
      reg1B9         : IN     std_logic_vector (31 DOWNTO 0);
      reg1BA         : IN     std_logic_vector (31 DOWNTO 0);
      reg1BB         : IN     std_logic_vector (31 DOWNTO 0);
      reg1BC         : IN     std_logic_vector (31 DOWNTO 0);
      reg1BD         : IN     std_logic_vector (31 DOWNTO 0);
      reg1BE         : IN     std_logic_vector (31 DOWNTO 0);
      reg1BF         : IN     std_logic_vector (31 DOWNTO 0);
      reg1C0         : IN     std_logic_vector (31 DOWNTO 0);
      reg1C1         : IN     std_logic_vector (31 DOWNTO 0);
      reg1C2         : IN     std_logic_vector (31 DOWNTO 0);
      reg1C3         : IN     std_logic_vector (31 DOWNTO 0);
      reg1C4         : IN     std_logic_vector (31 DOWNTO 0);
      reg1C5         : IN     std_logic_vector (31 DOWNTO 0);
      reg1C6         : IN     std_logic_vector (31 DOWNTO 0);
      reg1C7         : IN     std_logic_vector (31 DOWNTO 0);
      reg1C8         : IN     std_logic_vector (31 DOWNTO 0);
      reg1C9         : IN     std_logic_vector (31 DOWNTO 0);
      reg1CA         : IN     std_logic_vector (31 DOWNTO 0);
      reg1CB         : IN     std_logic_vector (31 DOWNTO 0);
      reg1CC         : IN     std_logic_vector (31 DOWNTO 0);
      reg1CD         : IN     std_logic_vector (31 DOWNTO 0);
      reg1CE         : IN     std_logic_vector (31 DOWNTO 0);
      reg1CF         : IN     std_logic_vector (31 DOWNTO 0);
      reg1D0         : IN     std_logic_vector (31 DOWNTO 0);
      reg1D1         : IN     std_logic_vector (31 DOWNTO 0);
      reg1D2         : IN     std_logic_vector (31 DOWNTO 0);
      reg1D3         : IN     std_logic_vector (31 DOWNTO 0);
      reg1D4         : IN     std_logic_vector (31 DOWNTO 0);
      reg1D5         : IN     std_logic_vector (31 DOWNTO 0);
      reg1D6         : IN     std_logic_vector (31 DOWNTO 0);
      reg1D7         : IN     std_logic_vector (31 DOWNTO 0);
      reg1D8         : IN     std_logic_vector (31 DOWNTO 0);
      reg1D9         : IN     std_logic_vector (31 DOWNTO 0);
      reg1DA         : IN     std_logic_vector (31 DOWNTO 0);
      reg1DB         : IN     std_logic_vector (31 DOWNTO 0);
      reg1DC         : IN     std_logic_vector (31 DOWNTO 0);
      reg1DD         : IN     std_logic_vector (31 DOWNTO 0);
      reg1DE         : IN     std_logic_vector (31 DOWNTO 0);
      reg1DF         : IN     std_logic_vector (31 DOWNTO 0);
      reg1E0         : IN     std_logic_vector (31 DOWNTO 0);
      reg1E1         : IN     std_logic_vector (31 DOWNTO 0);
      reg1E2         : IN     std_logic_vector (31 DOWNTO 0);
      reg1E3         : IN     std_logic_vector (31 DOWNTO 0);
      reg1E4         : IN     std_logic_vector (31 DOWNTO 0);
      reg1E5         : IN     std_logic_vector (31 DOWNTO 0);
      reg1E6         : IN     std_logic_vector (31 DOWNTO 0);
      reg1E7         : IN     std_logic_vector (31 DOWNTO 0);
      reg1E8         : IN     std_logic_vector (31 DOWNTO 0);
      reg1E9         : IN     std_logic_vector (31 DOWNTO 0);
      reg1EA         : IN     std_logic_vector (31 DOWNTO 0);
      reg1EB         : IN     std_logic_vector (31 DOWNTO 0);
      reg1EC         : IN     std_logic_vector (31 DOWNTO 0);
      reg1ED         : IN     std_logic_vector (31 DOWNTO 0);
      reg1EE         : IN     std_logic_vector (31 DOWNTO 0);
      reg1EF         : IN     std_logic_vector (31 DOWNTO 0);
      reg1F0         : IN     std_logic_vector (31 DOWNTO 0);
      reg1F1         : IN     std_logic_vector (31 DOWNTO 0);
      reg1F2         : IN     std_logic_vector (31 DOWNTO 0);
      reg1F3         : IN     std_logic_vector (31 DOWNTO 0);
      reg1F4         : IN     std_logic_vector (31 DOWNTO 0);
      reg1F5         : IN     std_logic_vector (31 DOWNTO 0);
      reg1F6         : IN     std_logic_vector (31 DOWNTO 0);
      reg1F7         : IN     std_logic_vector (31 DOWNTO 0);
      reg1F8         : IN     std_logic_vector (31 DOWNTO 0);
      reg1F9         : IN     std_logic_vector (31 DOWNTO 0);
      reg1FA         : IN     std_logic_vector (31 DOWNTO 0);
      reg1FB         : IN     std_logic_vector (31 DOWNTO 0);
      reg1FC         : IN     std_logic_vector (31 DOWNTO 0);
      reg1FD         : IN     std_logic_vector (31 DOWNTO 0);
      reg1FE         : IN     std_logic_vector (31 DOWNTO 0);
      reg1FF         : IN     std_logic_vector (31 DOWNTO 0);
      reg_in0        : IN     std_logic_vector (128*32-1 DOWNTO 0);
      reg_in1        : IN     std_logic_vector (128*32-1 DOWNTO 0);
      reset_s        : IN     std_logic;
      uartA_rxd      : IN     std_logic;
      uartB_rxd      : IN     std_logic;
      input_read     : OUT    std_logic_vector (256-1 DOWNTO 0);
      output_read    : OUT    std_logic_vector (256-1 DOWNTO 0);
      output_written : OUT    std_logic_vector (256-1 DOWNTO 0);
      reg000         : OUT    std_logic_vector (31 DOWNTO 0);
      reg001         : OUT    std_logic_vector (31 DOWNTO 0);
      reg002         : OUT    std_logic_vector (31 DOWNTO 0);
      reg003         : OUT    std_logic_vector (31 DOWNTO 0);
      reg004         : OUT    std_logic_vector (31 DOWNTO 0);
      reg005         : OUT    std_logic_vector (31 DOWNTO 0);
      reg006         : OUT    std_logic_vector (31 DOWNTO 0);
      reg007         : OUT    std_logic_vector (31 DOWNTO 0);
      reg008         : OUT    std_logic_vector (31 DOWNTO 0);
      reg009         : OUT    std_logic_vector (31 DOWNTO 0);
      reg00A         : OUT    std_logic_vector (31 DOWNTO 0);
      reg00B         : OUT    std_logic_vector (31 DOWNTO 0);
      reg00C         : OUT    std_logic_vector (31 DOWNTO 0);
      reg00D         : OUT    std_logic_vector (31 DOWNTO 0);
      reg00E         : OUT    std_logic_vector (31 DOWNTO 0);
      reg00F         : OUT    std_logic_vector (31 DOWNTO 0);
      reg010         : OUT    std_logic_vector (31 DOWNTO 0);
      reg011         : OUT    std_logic_vector (31 DOWNTO 0);
      reg012         : OUT    std_logic_vector (31 DOWNTO 0);
      reg013         : OUT    std_logic_vector (31 DOWNTO 0);
      reg014         : OUT    std_logic_vector (31 DOWNTO 0);
      reg015         : OUT    std_logic_vector (31 DOWNTO 0);
      reg016         : OUT    std_logic_vector (31 DOWNTO 0);
      reg017         : OUT    std_logic_vector (31 DOWNTO 0);
      reg018         : OUT    std_logic_vector (31 DOWNTO 0);
      reg019         : OUT    std_logic_vector (31 DOWNTO 0);
      reg01A         : OUT    std_logic_vector (31 DOWNTO 0);
      reg01B         : OUT    std_logic_vector (31 DOWNTO 0);
      reg01C         : OUT    std_logic_vector (31 DOWNTO 0);
      reg01D         : OUT    std_logic_vector (31 DOWNTO 0);
      reg01E         : OUT    std_logic_vector (31 DOWNTO 0);
      reg01F         : OUT    std_logic_vector (31 DOWNTO 0);
      reg020         : OUT    std_logic_vector (31 DOWNTO 0);
      reg021         : OUT    std_logic_vector (31 DOWNTO 0);
      reg022         : OUT    std_logic_vector (31 DOWNTO 0);
      reg023         : OUT    std_logic_vector (31 DOWNTO 0);
      reg024         : OUT    std_logic_vector (31 DOWNTO 0);
      reg025         : OUT    std_logic_vector (31 DOWNTO 0);
      reg026         : OUT    std_logic_vector (31 DOWNTO 0);
      reg027         : OUT    std_logic_vector (31 DOWNTO 0);
      reg028         : OUT    std_logic_vector (31 DOWNTO 0);
      reg029         : OUT    std_logic_vector (31 DOWNTO 0);
      reg02A         : OUT    std_logic_vector (31 DOWNTO 0);
      reg02B         : OUT    std_logic_vector (31 DOWNTO 0);
      reg02C         : OUT    std_logic_vector (31 DOWNTO 0);
      reg02D         : OUT    std_logic_vector (31 DOWNTO 0);
      reg02E         : OUT    std_logic_vector (31 DOWNTO 0);
      reg02F         : OUT    std_logic_vector (31 DOWNTO 0);
      reg030         : OUT    std_logic_vector (31 DOWNTO 0);
      reg031         : OUT    std_logic_vector (31 DOWNTO 0);
      reg032         : OUT    std_logic_vector (31 DOWNTO 0);
      reg033         : OUT    std_logic_vector (31 DOWNTO 0);
      reg034         : OUT    std_logic_vector (31 DOWNTO 0);
      reg035         : OUT    std_logic_vector (31 DOWNTO 0);
      reg036         : OUT    std_logic_vector (31 DOWNTO 0);
      reg037         : OUT    std_logic_vector (31 DOWNTO 0);
      reg038         : OUT    std_logic_vector (31 DOWNTO 0);
      reg039         : OUT    std_logic_vector (31 DOWNTO 0);
      reg03A         : OUT    std_logic_vector (31 DOWNTO 0);
      reg03B         : OUT    std_logic_vector (31 DOWNTO 0);
      reg03C         : OUT    std_logic_vector (31 DOWNTO 0);
      reg03D         : OUT    std_logic_vector (31 DOWNTO 0);
      reg03E         : OUT    std_logic_vector (31 DOWNTO 0);
      reg03F         : OUT    std_logic_vector (31 DOWNTO 0);
      reg040         : OUT    std_logic_vector (31 DOWNTO 0);
      reg041         : OUT    std_logic_vector (31 DOWNTO 0);
      reg042         : OUT    std_logic_vector (31 DOWNTO 0);
      reg043         : OUT    std_logic_vector (31 DOWNTO 0);
      reg044         : OUT    std_logic_vector (31 DOWNTO 0);
      reg045         : OUT    std_logic_vector (31 DOWNTO 0);
      reg046         : OUT    std_logic_vector (31 DOWNTO 0);
      reg047         : OUT    std_logic_vector (31 DOWNTO 0);
      reg048         : OUT    std_logic_vector (31 DOWNTO 0);
      reg049         : OUT    std_logic_vector (31 DOWNTO 0);
      reg04A         : OUT    std_logic_vector (31 DOWNTO 0);
      reg04B         : OUT    std_logic_vector (31 DOWNTO 0);
      reg04C         : OUT    std_logic_vector (31 DOWNTO 0);
      reg04D         : OUT    std_logic_vector (31 DOWNTO 0);
      reg04E         : OUT    std_logic_vector (31 DOWNTO 0);
      reg04F         : OUT    std_logic_vector (31 DOWNTO 0);
      reg050         : OUT    std_logic_vector (31 DOWNTO 0);
      reg051         : OUT    std_logic_vector (31 DOWNTO 0);
      reg052         : OUT    std_logic_vector (31 DOWNTO 0);
      reg053         : OUT    std_logic_vector (31 DOWNTO 0);
      reg054         : OUT    std_logic_vector (31 DOWNTO 0);
      reg055         : OUT    std_logic_vector (31 DOWNTO 0);
      reg056         : OUT    std_logic_vector (31 DOWNTO 0);
      reg057         : OUT    std_logic_vector (31 DOWNTO 0);
      reg058         : OUT    std_logic_vector (31 DOWNTO 0);
      reg059         : OUT    std_logic_vector (31 DOWNTO 0);
      reg05A         : OUT    std_logic_vector (31 DOWNTO 0);
      reg05B         : OUT    std_logic_vector (31 DOWNTO 0);
      reg05C         : OUT    std_logic_vector (31 DOWNTO 0);
      reg05D         : OUT    std_logic_vector (31 DOWNTO 0);
      reg05E         : OUT    std_logic_vector (31 DOWNTO 0);
      reg05F         : OUT    std_logic_vector (31 DOWNTO 0);
      reg060         : OUT    std_logic_vector (31 DOWNTO 0);
      reg061         : OUT    std_logic_vector (31 DOWNTO 0);
      reg062         : OUT    std_logic_vector (31 DOWNTO 0);
      reg063         : OUT    std_logic_vector (31 DOWNTO 0);
      reg064         : OUT    std_logic_vector (31 DOWNTO 0);
      reg065         : OUT    std_logic_vector (31 DOWNTO 0);
      reg066         : OUT    std_logic_vector (31 DOWNTO 0);
      reg067         : OUT    std_logic_vector (31 DOWNTO 0);
      reg068         : OUT    std_logic_vector (31 DOWNTO 0);
      reg069         : OUT    std_logic_vector (31 DOWNTO 0);
      reg06A         : OUT    std_logic_vector (31 DOWNTO 0);
      reg06B         : OUT    std_logic_vector (31 DOWNTO 0);
      reg06C         : OUT    std_logic_vector (31 DOWNTO 0);
      reg06D         : OUT    std_logic_vector (31 DOWNTO 0);
      reg06E         : OUT    std_logic_vector (31 DOWNTO 0);
      reg06F         : OUT    std_logic_vector (31 DOWNTO 0);
      reg070         : OUT    std_logic_vector (31 DOWNTO 0);
      reg071         : OUT    std_logic_vector (31 DOWNTO 0);
      reg072         : OUT    std_logic_vector (31 DOWNTO 0);
      reg073         : OUT    std_logic_vector (31 DOWNTO 0);
      reg074         : OUT    std_logic_vector (31 DOWNTO 0);
      reg075         : OUT    std_logic_vector (31 DOWNTO 0);
      reg076         : OUT    std_logic_vector (31 DOWNTO 0);
      reg077         : OUT    std_logic_vector (31 DOWNTO 0);
      reg078         : OUT    std_logic_vector (31 DOWNTO 0);
      reg079         : OUT    std_logic_vector (31 DOWNTO 0);
      reg07A         : OUT    std_logic_vector (31 DOWNTO 0);
      reg07B         : OUT    std_logic_vector (31 DOWNTO 0);
      reg07C         : OUT    std_logic_vector (31 DOWNTO 0);
      reg07D         : OUT    std_logic_vector (31 DOWNTO 0);
      reg07E         : OUT    std_logic_vector (31 DOWNTO 0);
      reg07F         : OUT    std_logic_vector (31 DOWNTO 0);
      reg080         : OUT    std_logic_vector (31 DOWNTO 0);
      reg081         : OUT    std_logic_vector (31 DOWNTO 0);
      reg082         : OUT    std_logic_vector (31 DOWNTO 0);
      reg083         : OUT    std_logic_vector (31 DOWNTO 0);
      reg084         : OUT    std_logic_vector (31 DOWNTO 0);
      reg085         : OUT    std_logic_vector (31 DOWNTO 0);
      reg086         : OUT    std_logic_vector (31 DOWNTO 0);
      reg087         : OUT    std_logic_vector (31 DOWNTO 0);
      reg088         : OUT    std_logic_vector (31 DOWNTO 0);
      reg089         : OUT    std_logic_vector (31 DOWNTO 0);
      reg08A         : OUT    std_logic_vector (31 DOWNTO 0);
      reg08B         : OUT    std_logic_vector (31 DOWNTO 0);
      reg08C         : OUT    std_logic_vector (31 DOWNTO 0);
      reg08D         : OUT    std_logic_vector (31 DOWNTO 0);
      reg08E         : OUT    std_logic_vector (31 DOWNTO 0);
      reg08F         : OUT    std_logic_vector (31 DOWNTO 0);
      reg090         : OUT    std_logic_vector (31 DOWNTO 0);
      reg091         : OUT    std_logic_vector (31 DOWNTO 0);
      reg092         : OUT    std_logic_vector (31 DOWNTO 0);
      reg093         : OUT    std_logic_vector (31 DOWNTO 0);
      reg094         : OUT    std_logic_vector (31 DOWNTO 0);
      reg095         : OUT    std_logic_vector (31 DOWNTO 0);
      reg096         : OUT    std_logic_vector (31 DOWNTO 0);
      reg097         : OUT    std_logic_vector (31 DOWNTO 0);
      reg098         : OUT    std_logic_vector (31 DOWNTO 0);
      reg099         : OUT    std_logic_vector (31 DOWNTO 0);
      reg09A         : OUT    std_logic_vector (31 DOWNTO 0);
      reg09B         : OUT    std_logic_vector (31 DOWNTO 0);
      reg09C         : OUT    std_logic_vector (31 DOWNTO 0);
      reg09D         : OUT    std_logic_vector (31 DOWNTO 0);
      reg09E         : OUT    std_logic_vector (31 DOWNTO 0);
      reg09F         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0A0         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0A1         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0A2         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0A3         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0A4         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0A5         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0A6         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0A7         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0A8         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0A9         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0AA         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0AB         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0AC         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0AD         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0AE         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0AF         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0B0         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0B1         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0B2         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0B3         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0B4         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0B5         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0B6         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0B7         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0B8         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0B9         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0BA         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0BB         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0BC         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0BD         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0BE         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0BF         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0C0         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0C1         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0C2         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0C3         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0C4         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0C5         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0C6         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0C7         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0C8         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0C9         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0CA         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0CB         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0CC         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0CD         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0CE         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0CF         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0D0         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0D1         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0D2         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0D3         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0D4         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0D5         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0D6         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0D7         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0D8         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0D9         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0DA         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0DB         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0DC         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0DD         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0DE         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0DF         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0E0         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0E1         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0E2         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0E3         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0E4         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0E5         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0E6         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0E7         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0E8         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0E9         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0EA         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0EB         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0EC         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0ED         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0EE         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0EF         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0F0         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0F1         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0F2         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0F3         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0F4         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0F5         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0F6         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0F7         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0F8         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0F9         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0FA         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0FB         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0FC         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0FD         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0FE         : OUT    std_logic_vector (31 DOWNTO 0);
      reg0FF         : OUT    std_logic_vector (31 DOWNTO 0);
      reg_out0       : OUT    std_logic_vector (128*32-1 DOWNTO 0);
      reg_out1       : OUT    std_logic_vector (128*32-1 DOWNTO 0);
      uartA_txd      : OUT    std_logic;
      uartB_txd      : OUT    std_logic
   );

-- Declarations

END IP006_uart_reg32 ;

--
-- VHDL Architecture IP006_lib.IP006_uart_reg32.struct
--
-- Created:
--          by - lamplpat.UNKNOWN (M00159)
--          at - 14:15:28 20.04.2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.2 (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
LIBRARY IP006_LIB;
USE IP006_LIB.busdef.ALL;
USE ieee.numeric_std.ALL;


ARCHITECTURE struct OF IP006_uart_reg32 IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL enable      : std_logic;
   SIGNAL mbus0_i     : mbus32_i_t;
   SIGNAL mbus0_o     : mbus32_o_t;
   SIGNAL mbus1_i     : mbus32_i_t;
   SIGNAL mbus1_o     : mbus32_o_t;
   SIGNAL mbusA_i     : mbus32_i_t;
   SIGNAL mbusA_o     : mbus32_o_t;
   SIGNAL mbusB_i     : mbus32_i_t;
   SIGNAL mbusB_o     : mbus32_o_t;
   SIGNAL rd_in_regs  : std_logic_vector(255 DOWNTO 0);         -- active high "has been read" 5cycle strobes
   SIGNAL rd_out_regs : std_logic_vector(255 DOWNTO 0);         -- active high "has been read" 5cycle strobes
   SIGNAL reg100_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg101_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg102_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg103_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg104_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg105_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg106_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg107_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg108_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg109_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg10A_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg10B_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg10C_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg10D_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg10E_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg10F_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg110_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg111_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg112_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg113_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg114_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg115_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg116_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg117_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg118_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg119_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg11A_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg11B_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg11C_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg11D_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg11E_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg11F_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg120_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg121_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg122_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg123_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg124_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg125_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg126_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg127_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg128_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg129_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg12A_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg12B_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg12C_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg12D_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg12E_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg12F_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg130_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg131_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg132_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg133_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg134_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg135_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg136_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg137_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg138_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg139_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg13A_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg13B_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg13C_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg13D_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg13E_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg13F_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg140_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg141_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg142_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg143_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg144_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg145_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg146_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg147_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg148_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg149_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg14A_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg14B_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg14C_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg14D_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg14E_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg14F_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg150_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg151_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg152_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg153_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg154_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg155_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg156_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg157_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg158_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg159_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg15A_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg15B_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg15C_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg15D_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg15E_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg15F_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg160_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg161_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg162_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg163_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg164_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg165_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg166_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg167_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg168_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg169_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg16A_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg16B_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg16C_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg16D_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg16E_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg16F_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg170_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg171_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg172_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg173_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg174_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg175_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg176_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg177_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg178_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg179_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg17A_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg17B_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg17C_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg17D_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg17E_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg17F_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg180_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg181_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg182_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg183_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg184_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg185_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg186_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg187_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg188_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg189_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg18A_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg18B_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg18C_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg18D_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg18E_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg18F_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg190_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg191_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg192_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg193_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg194_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg195_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg196_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg197_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg198_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg199_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg19A_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg19B_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg19C_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg19D_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg19E_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg19F_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1A0_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1A1_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1A2_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1A3_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1A4_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1A5_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1A6_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1A7_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1A8_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1A9_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1AA_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1AB_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1AC_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1AD_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1AE_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1AF_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1B0_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1B1_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1B2_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1B3_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1B4_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1B5_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1B6_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1B7_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1B8_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1B9_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1BA_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1BB_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1BC_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1BD_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1BE_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1BF_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1C0_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1C1_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1C2_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1C3_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1C4_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1C5_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1C6_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1C7_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1C8_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1C9_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1CA_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1CB_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1CC_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1CD_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1CE_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1CF_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1D0_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1D1_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1D2_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1D3_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1D4_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1D5_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1D6_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1D7_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1D8_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1D9_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1DA_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1DB_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1DC_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1DD_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1DE_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1DF_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1E0_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1E1_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1E2_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1E3_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1E4_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1E5_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1E6_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1E7_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1E8_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1E9_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1EA_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1EB_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1EC_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1ED_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1EE_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1EF_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1F0_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1F1_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1F2_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1F3_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1F4_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1F5_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1F6_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1F7_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1F8_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1F9_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1FA_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1FB_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1FC_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1FD_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1FE_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1FF_in   : std_logic_vector(31 DOWNTO 0);
   SIGNAL reg1_din    : std_logic_vector(256*32-1 DOWNTO 0);    -- parallel input for readback
   SIGNAL reg1_din1   : std_logic_vector(256*32-1 DOWNTO 0);    -- parallel input for readback
   SIGNAL reg_din     : std_logic_vector(256*32-1 DOWNTO 0);    -- parallel input for readback
   SIGNAL reg_dout    : std_logic_vector(256*32-1 DOWNTO 0);    -- parallel output of all registers
   SIGNAL reg_dout1   : std_logic_vector(256*32-1 DOWNTO 0);    -- parallel output of all registers
   SIGNAL reg_input   : std_logic_vector(256*32-1 DOWNTO 0);    -- parallel input for readback
   SIGNAL reg_wen     : std_logic_vector(255 DOWNTO 0);         -- active high write strobes
   SIGNAL sbus0_o     : sbus32_o_t;
   SIGNAL sbus1_o     : sbus32_o_t;
   SIGNAL sbus_i      : sbus32_i_t;
   SIGNAL sbus_i1     : sbus32_i_t;
   SIGNAL sbus_i2     : sbus32_i_t;
   SIGNAL sbus_null   : sbus32_o_t;
   SIGNAL sbus_oB1    : sbus32_o_t;
   SIGNAL sbus_oB2    : sbus32_o_t;
   SIGNAL we_out_regs : std_logic_vector(255 DOWNTO 0);         -- active high write strobes


   -- Component Declarations
   COMPONENT arbiter11_32
   PORT (
      mbus0_i   : OUT    mbus32_i_t ;
      mbus1_i   : OUT    mbus32_i_t ;
      mbus0_o   : IN     mbus32_o_t ;
      mbus1_o   : IN     mbus32_o_t ;
      sbus_i    : OUT    sbus32_i_t ;
      sbus0_o   : IN     sbus32_o_t ;
      sbus1_o   : IN     sbus32_o_t ;
      sbus2_o   : IN     sbus32_o_t ;
      sbus3_o   : IN     sbus32_o_t ;
      sbus4_o   : IN     sbus32_o_t ;
      sbus5_o   : IN     sbus32_o_t ;
      sbus6_o   : IN     sbus32_o_t ;
      sbus7_o   : IN     sbus32_o_t ;
      sbus8_o   : IN     sbus32_o_t ;
      sbus9_o   : IN     sbus32_o_t ;
      sbus10_o  : IN     sbus32_o_t ;
      mbus_null : OUT    mbus32_o_t ;
      sbus_null : OUT    sbus32_o_t ;
      reset     : IN     std_logic ;
      clk       : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT delay_e_vector
   GENERIC (
      DELAY_CLK_CYCLES : integer   := 8;
      WIDTH            : integer   := 8;
      RST_TO           : std_logic := '0'
   );
   PORT (
      clk    : IN     std_logic;
      enable : IN     std_logic;
      input  : IN     std_logic_vector (WIDTH-1 DOWNTO 0);
      reset  : IN     std_logic;
      output : OUT    std_logic_vector (WIDTH-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT delay_mbus32
   GENERIC (
      DELAY_CYCLES : integer := 16
   );
   PORT (
      clk     : IN     std_logic ;
      mbus_iB : IN     mbus32_i_t ;
      mbus_o  : IN     mbus32_o_t ;
      rst     : IN     std_logic ;
      mbus_i  : OUT    mbus32_i_t ;
      mbus_oB : OUT    mbus32_o_t 
   );
   END COMPONENT;
   COMPONENT delay_sbus32
   GENERIC (
      DELAY_CYCLES : integer := 16
   );
   PORT (
      clk     : IN     std_logic ;
      rst     : IN     std_logic ;
      sbus_i  : IN     sbus32_i_t ;
      sbus_oB : IN     sbus32_o_t ;
      sbus_iB : OUT    sbus32_i_t ;
      sbus_o  : OUT    sbus32_o_t 
   );
   END COMPONENT;
   COMPONENT register_array_b32
   GENERIC (
      addr_width_g : integer := 8;       --width of address
      data_width_g : integer := 8;       --width of data
      addr_base_g  : std_logic_vector;
      addr_range_g : std_logic_vector;
      nregs_g      : integer := 16;      --number of registers
      init_val_g   : std_logic_vector
   );
   PORT (
      sbus_o   : OUT    sbus32_o_t ;
      sbus_i   : IN     sbus32_i_t ;
      reg_din  : IN     std_logic_vector ( nregs_g*data_width_g-1 DOWNTO 0 ); -- parallel input for readback
      reg_dout : OUT    std_logic_vector ( nregs_g*data_width_g-1 DOWNTO 0 ); -- parallel output of all registers
      we       : OUT    std_logic_vector ( nregs_g-1 DOWNTO 0);               -- active high write strobes (duration of x cycles, dependend on pipelining of bus)
      rd       : OUT    std_logic_vector ( nregs_g-1 DOWNTO 0);               -- active high "has been read" strobes (duration of x cycles, dependend on pipelining of bus)
      reg_wen  : IN     std_logic_vector ( nregs_g-1 DOWNTO 0);               -- active high write strobes ???
      reset    : IN     std_logic ;                                           -- synchronous, active high reset
      clk      : IN     std_logic                                             -- register clock
   );
   END COMPONENT;
   COMPONENT syn2_vector
   GENERIC (
      sig_width : integer := 8
   );
   PORT (
      clk     : IN     std_logic;
      inputA  : IN     std_logic_vector (sig_width-1 DOWNTO 0);
      rst     : IN     std_logic;
      any     : OUT    std_logic_vector (sig_width-1 DOWNTO 0);
      fall    : OUT    std_logic_vector (sig_width-1 DOWNTO 0);
      outputA : OUT    std_logic_vector (sig_width-1 DOWNTO 0);
      rise    : OUT    std_logic_vector (sig_width-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT uart_bridge_32
   GENERIC (
      core_clk_freq_g : integer := 50000000;
      baudrate_g      : integer := 115200;
      simulate_g      : boolean := false;
      commandfile_g   : string  := "command.txt"
   );
   PORT (
      clk    : IN     std_logic ;
      mbus_i : IN     mbus32_i_t ;
      reset  : IN     std_logic ;
      rxd    : IN     std_logic ;
      mbus_o : OUT    mbus32_o_t ;
      txd    : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : arbiter11_32 USE ENTITY IP006_lib.arbiter11_32;
   FOR ALL : delay_e_vector USE ENTITY IP006_lib.delay_e_vector;
   FOR ALL : delay_mbus32 USE ENTITY IP006_lib.delay_mbus32;
   FOR ALL : delay_sbus32 USE ENTITY IP006_lib.delay_sbus32;
   FOR ALL : register_array_b32 USE ENTITY IP006_lib.register_array_b32;
   FOR ALL : syn2_vector USE ENTITY IP006_lib.syn2_vector;
   FOR ALL : uart_bridge_32 USE ENTITY IP006_lib.uart_bridge_32;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   gen0_on: if (inputs_g >  0) generate
   reg100_in <= reg100;
   reg101_in <= reg101;
   reg102_in <= reg102;
   reg103_in <= reg103;
   reg104_in <= reg104;
   reg105_in <= reg105;
   reg106_in <= reg106;
   reg107_in <= reg107;
   reg108_in <= reg108;
   reg109_in <= reg109;
   reg10A_in <= reg10A;
   reg10B_in <= reg10B;
   reg10C_in <= reg10C;
   reg10D_in <= reg10D;
   reg10E_in <= reg10E;
   reg10F_in <= reg10F;
   end generate;
   gen0_off: if (not (inputs_g >  0)) generate
   reg100_in <= (others => '0');
   reg101_in <= (others => '0');
   reg102_in <= (others => '0');
   reg103_in <= (others => '0');
   reg104_in <= (others => '0');
   reg105_in <= (others => '0');
   reg106_in <= (others => '0');
   reg107_in <= (others => '0');
   reg108_in <= (others => '0');
   reg109_in <= (others => '0');
   reg10A_in <= (others => '0');
   reg10B_in <= (others => '0');
   reg10C_in <= (others => '0');
   reg10D_in <= (others => '0');
   reg10E_in <= (others => '0');
   reg10F_in <= (others => '0');
   end generate;
   gen1_on: if (inputs_g >  1) generate
   reg110_in <= reg110;
   reg111_in <= reg111;
   reg112_in <= reg112;
   reg113_in <= reg113;
   reg114_in <= reg114;
   reg115_in <= reg115;
   reg116_in <= reg116;
   reg117_in <= reg117;
   reg118_in <= reg118;
   reg119_in <= reg119;
   reg11A_in <= reg11A;
   reg11B_in <= reg11B;
   reg11C_in <= reg11C;
   reg11D_in <= reg11D;
   reg11E_in <= reg11E;
   reg11F_in <= reg11F;
   end generate;
   gen1_off: if (not (inputs_g >  1)) generate
   reg110_in <= (others => '0');
   reg111_in <= (others => '0');
   reg112_in <= (others => '0');
   reg113_in <= (others => '0');
   reg114_in <= (others => '0');
   reg115_in <= (others => '0');
   reg116_in <= (others => '0');
   reg117_in <= (others => '0');
   reg118_in <= (others => '0');
   reg119_in <= (others => '0');
   reg11A_in <= (others => '0');
   reg11B_in <= (others => '0');
   reg11C_in <= (others => '0');
   reg11D_in <= (others => '0');
   reg11E_in <= (others => '0');
   reg11F_in <= (others => '0');
   end generate;
   gen2_on: if (inputs_g >  2) generate
   reg120_in <= reg120;
   reg121_in <= reg121;
   reg122_in <= reg122;
   reg123_in <= reg123;
   reg124_in <= reg124;
   reg125_in <= reg125;
   reg126_in <= reg126;
   reg127_in <= reg127;
   reg128_in <= reg128;
   reg129_in <= reg129;
   reg12A_in <= reg12A;
   reg12B_in <= reg12B;
   reg12C_in <= reg12C;
   reg12D_in <= reg12D;
   reg12E_in <= reg12E;
   reg12F_in <= reg12F;
   end generate;
   gen2_off: if (not (inputs_g >  2)) generate
   reg120_in <= (others => '0');
   reg121_in <= (others => '0');
   reg122_in <= (others => '0');
   reg123_in <= (others => '0');
   reg124_in <= (others => '0');
   reg125_in <= (others => '0');
   reg126_in <= (others => '0');
   reg127_in <= (others => '0');
   reg128_in <= (others => '0');
   reg129_in <= (others => '0');
   reg12A_in <= (others => '0');
   reg12B_in <= (others => '0');
   reg12C_in <= (others => '0');
   reg12D_in <= (others => '0');
   reg12E_in <= (others => '0');
   reg12F_in <= (others => '0');
   end generate;
   gen3_on: if (inputs_g >  3) generate
   reg130_in <= reg130;
   reg131_in <= reg131;
   reg132_in <= reg132;
   reg133_in <= reg133;
   reg134_in <= reg134;
   reg135_in <= reg135;
   reg136_in <= reg136;
   reg137_in <= reg137;
   reg138_in <= reg138;
   reg139_in <= reg139;
   reg13A_in <= reg13A;
   reg13B_in <= reg13B;
   reg13C_in <= reg13C;
   reg13D_in <= reg13D;
   reg13E_in <= reg13E;
   reg13F_in <= reg13F;
   end generate;
   gen3_off: if (not (inputs_g >  3)) generate
   reg130_in <= (others => '0');
   reg131_in <= (others => '0');
   reg132_in <= (others => '0');
   reg133_in <= (others => '0');
   reg134_in <= (others => '0');
   reg135_in <= (others => '0');
   reg136_in <= (others => '0');
   reg137_in <= (others => '0');
   reg138_in <= (others => '0');
   reg139_in <= (others => '0');
   reg13A_in <= (others => '0');
   reg13B_in <= (others => '0');
   reg13C_in <= (others => '0');
   reg13D_in <= (others => '0');
   reg13E_in <= (others => '0');
   reg13F_in <= (others => '0');
   end generate;
   gen4_on: if (inputs_g >  4) generate
   reg140_in <= reg140;
   reg141_in <= reg141;
   reg142_in <= reg142;
   reg143_in <= reg143;
   reg144_in <= reg144;
   reg145_in <= reg145;
   reg146_in <= reg146;
   reg147_in <= reg147;
   reg148_in <= reg148;
   reg149_in <= reg149;
   reg14A_in <= reg14A;
   reg14B_in <= reg14B;
   reg14C_in <= reg14C;
   reg14D_in <= reg14D;
   reg14E_in <= reg14E;
   reg14F_in <= reg14F;
   end generate;
   gen4_off: if (not (inputs_g >  4)) generate
   reg140_in <= (others => '0');
   reg141_in <= (others => '0');
   reg142_in <= (others => '0');
   reg143_in <= (others => '0');
   reg144_in <= (others => '0');
   reg145_in <= (others => '0');
   reg146_in <= (others => '0');
   reg147_in <= (others => '0');
   reg148_in <= (others => '0');
   reg149_in <= (others => '0');
   reg14A_in <= (others => '0');
   reg14B_in <= (others => '0');
   reg14C_in <= (others => '0');
   reg14D_in <= (others => '0');
   reg14E_in <= (others => '0');
   reg14F_in <= (others => '0');
   end generate;
   gen5_on: if (inputs_g >  5) generate
   reg150_in <= reg150;
   reg151_in <= reg151;
   reg152_in <= reg152;
   reg153_in <= reg153;
   reg154_in <= reg154;
   reg155_in <= reg155;
   reg156_in <= reg156;
   reg157_in <= reg157;
   reg158_in <= reg158;
   reg159_in <= reg159;
   reg15A_in <= reg15A;
   reg15B_in <= reg15B;
   reg15C_in <= reg15C;
   reg15D_in <= reg15D;
   reg15E_in <= reg15E;
   reg15F_in <= reg15F;
   end generate;
   gen5_off: if (not (inputs_g >  5)) generate
   reg150_in <= (others => '0');
   reg151_in <= (others => '0');
   reg152_in <= (others => '0');
   reg153_in <= (others => '0');
   reg154_in <= (others => '0');
   reg155_in <= (others => '0');
   reg156_in <= (others => '0');
   reg157_in <= (others => '0');
   reg158_in <= (others => '0');
   reg159_in <= (others => '0');
   reg15A_in <= (others => '0');
   reg15B_in <= (others => '0');
   reg15C_in <= (others => '0');
   reg15D_in <= (others => '0');
   reg15E_in <= (others => '0');
   reg15F_in <= (others => '0');
   end generate;
   gen6_on: if (inputs_g >  6) generate
   reg160_in <= reg160;
   reg161_in <= reg161;
   reg162_in <= reg162;
   reg163_in <= reg163;
   reg164_in <= reg164;
   reg165_in <= reg165;
   reg166_in <= reg166;
   reg167_in <= reg167;
   reg168_in <= reg168;
   reg169_in <= reg169;
   reg16A_in <= reg16A;
   reg16B_in <= reg16B;
   reg16C_in <= reg16C;
   reg16D_in <= reg16D;
   reg16E_in <= reg16E;
   reg16F_in <= reg16F;
   end generate;
   gen6_off: if (not (inputs_g >  6)) generate
   reg160_in <= (others => '0');
   reg161_in <= (others => '0');
   reg162_in <= (others => '0');
   reg163_in <= (others => '0');
   reg164_in <= (others => '0');
   reg165_in <= (others => '0');
   reg166_in <= (others => '0');
   reg167_in <= (others => '0');
   reg168_in <= (others => '0');
   reg169_in <= (others => '0');
   reg16A_in <= (others => '0');
   reg16B_in <= (others => '0');
   reg16C_in <= (others => '0');
   reg16D_in <= (others => '0');
   reg16E_in <= (others => '0');
   reg16F_in <= (others => '0');
   end generate;
   gen7_on: if (inputs_g >  7) generate
   reg170_in <= reg170;
   reg171_in <= reg171;
   reg172_in <= reg172;
   reg173_in <= reg173;
   reg174_in <= reg174;
   reg175_in <= reg175;
   reg176_in <= reg176;
   reg177_in <= reg177;
   reg178_in <= reg178;
   reg179_in <= reg179;
   reg17A_in <= reg17A;
   reg17B_in <= reg17B;
   reg17C_in <= reg17C;
   reg17D_in <= reg17D;
   reg17E_in <= reg17E;
   reg17F_in <= reg17F;
   end generate;
   gen7_off: if (not (inputs_g >  7)) generate
   reg170_in <= (others => '0');
   reg171_in <= (others => '0');
   reg172_in <= (others => '0');
   reg173_in <= (others => '0');
   reg174_in <= (others => '0');
   reg175_in <= (others => '0');
   reg176_in <= (others => '0');
   reg177_in <= (others => '0');
   reg178_in <= (others => '0');
   reg179_in <= (others => '0');
   reg17A_in <= (others => '0');
   reg17B_in <= (others => '0');
   reg17C_in <= (others => '0');
   reg17D_in <= (others => '0');
   reg17E_in <= (others => '0');
   reg17F_in <= (others => '0');
   end generate;
   gen8_on: if (inputs_g >  8) generate
   reg180_in <= reg180;
   reg181_in <= reg181;
   reg182_in <= reg182;
   reg183_in <= reg183;
   reg184_in <= reg184;
   reg185_in <= reg185;
   reg186_in <= reg186;
   reg187_in <= reg187;
   reg188_in <= reg188;
   reg189_in <= reg189;
   reg18A_in <= reg18A;
   reg18B_in <= reg18B;
   reg18C_in <= reg18C;
   reg18D_in <= reg18D;
   reg18E_in <= reg18E;
   reg18F_in <= reg18F;
   end generate;
   gen8_off: if (not (inputs_g >  8)) generate
   reg180_in <= (others => '0');
   reg181_in <= (others => '0');
   reg182_in <= (others => '0');
   reg183_in <= (others => '0');
   reg184_in <= (others => '0');
   reg185_in <= (others => '0');
   reg186_in <= (others => '0');
   reg187_in <= (others => '0');
   reg188_in <= (others => '0');
   reg189_in <= (others => '0');
   reg18A_in <= (others => '0');
   reg18B_in <= (others => '0');
   reg18C_in <= (others => '0');
   reg18D_in <= (others => '0');
   reg18E_in <= (others => '0');
   reg18F_in <= (others => '0');
   end generate;
   gen9_on: if (inputs_g >  9) generate
   reg190_in <= reg190;
   reg191_in <= reg191;
   reg192_in <= reg192;
   reg193_in <= reg193;
   reg194_in <= reg194;
   reg195_in <= reg195;
   reg196_in <= reg196;
   reg197_in <= reg197;
   reg198_in <= reg198;
   reg199_in <= reg199;
   reg19A_in <= reg19A;
   reg19B_in <= reg19B;
   reg19C_in <= reg19C;
   reg19D_in <= reg19D;
   reg19E_in <= reg19E;
   reg19F_in <= reg19F;
   end generate;
   gen9_off: if (not (inputs_g >  9)) generate
   reg190_in <= (others => '0');
   reg191_in <= (others => '0');
   reg192_in <= (others => '0');
   reg193_in <= (others => '0');
   reg194_in <= (others => '0');
   reg195_in <= (others => '0');
   reg196_in <= (others => '0');
   reg197_in <= (others => '0');
   reg198_in <= (others => '0');
   reg199_in <= (others => '0');
   reg19A_in <= (others => '0');
   reg19B_in <= (others => '0');
   reg19C_in <= (others => '0');
   reg19D_in <= (others => '0');
   reg19E_in <= (others => '0');
   reg19F_in <= (others => '0');
   end generate;
   genA_on: if (inputs_g > 10) generate
   reg1A0_in <= reg1A0;
   reg1A1_in <= reg1A1;
   reg1A2_in <= reg1A2;
   reg1A3_in <= reg1A3;
   reg1A4_in <= reg1A4;
   reg1A5_in <= reg1A5;
   reg1A6_in <= reg1A6;
   reg1A7_in <= reg1A7;
   reg1A8_in <= reg1A8;
   reg1A9_in <= reg1A9;
   reg1AA_in <= reg1AA;
   reg1AB_in <= reg1AB;
   reg1AC_in <= reg1AC;
   reg1AD_in <= reg1AD;
   reg1AE_in <= reg1AE;
   reg1AF_in <= reg1AF;
   end generate;
   genA_off: if (not (inputs_g > 10)) generate
   reg1A0_in <= (others => '0');
   reg1A1_in <= (others => '0');
   reg1A2_in <= (others => '0');
   reg1A3_in <= (others => '0');
   reg1A4_in <= (others => '0');
   reg1A5_in <= (others => '0');
   reg1A6_in <= (others => '0');
   reg1A7_in <= (others => '0');
   reg1A8_in <= (others => '0');
   reg1A9_in <= (others => '0');
   reg1AA_in <= (others => '0');
   reg1AB_in <= (others => '0');
   reg1AC_in <= (others => '0');
   reg1AD_in <= (others => '0');
   reg1AE_in <= (others => '0');
   reg1AF_in <= (others => '0');
   end generate;
   genB_on: if (inputs_g > 11) generate
   reg1B0_in <= reg1B0;
   reg1B1_in <= reg1B1;
   reg1B2_in <= reg1B2;
   reg1B3_in <= reg1B3;
   reg1B4_in <= reg1B4;
   reg1B5_in <= reg1B5;
   reg1B6_in <= reg1B6;
   reg1B7_in <= reg1B7;
   reg1B8_in <= reg1B8;
   reg1B9_in <= reg1B9;
   reg1BA_in <= reg1BA;
   reg1BB_in <= reg1BB;
   reg1BC_in <= reg1BC;
   reg1BD_in <= reg1BD;
   reg1BE_in <= reg1BE;
   reg1BF_in <= reg1BF;
   end generate;
   genB_off: if (not (inputs_g > 11)) generate
   reg1B0_in <= (others => '0');
   reg1B1_in <= (others => '0');
   reg1B2_in <= (others => '0');
   reg1B3_in <= (others => '0');
   reg1B4_in <= (others => '0');
   reg1B5_in <= (others => '0');
   reg1B6_in <= (others => '0');
   reg1B7_in <= (others => '0');
   reg1B8_in <= (others => '0');
   reg1B9_in <= (others => '0');
   reg1BA_in <= (others => '0');
   reg1BB_in <= (others => '0');
   reg1BC_in <= (others => '0');
   reg1BD_in <= (others => '0');
   reg1BE_in <= (others => '0');
   reg1BF_in <= (others => '0');
   end generate;
   genC_on: if (inputs_g > 12) generate
   reg1C0_in <= reg1C0;
   reg1C1_in <= reg1C1;
   reg1C2_in <= reg1C2;
   reg1C3_in <= reg1C3;
   reg1C4_in <= reg1C4;
   reg1C5_in <= reg1C5;
   reg1C6_in <= reg1C6;
   reg1C7_in <= reg1C7;
   reg1C8_in <= reg1C8;
   reg1C9_in <= reg1C9;
   reg1CA_in <= reg1CA;
   reg1CB_in <= reg1CB;
   reg1CC_in <= reg1CC;
   reg1CD_in <= reg1CD;
   reg1CE_in <= reg1CE;
   reg1CF_in <= reg1CF;
   end generate;
   genC_off: if (not (inputs_g > 12)) generate
   reg1C0_in <= (others => '0');
   reg1C1_in <= (others => '0');
   reg1C2_in <= (others => '0');
   reg1C3_in <= (others => '0');
   reg1C4_in <= (others => '0');
   reg1C5_in <= (others => '0');
   reg1C6_in <= (others => '0');
   reg1C7_in <= (others => '0');
   reg1C8_in <= (others => '0');
   reg1C9_in <= (others => '0');
   reg1CA_in <= (others => '0');
   reg1CB_in <= (others => '0');
   reg1CC_in <= (others => '0');
   reg1CD_in <= (others => '0');
   reg1CE_in <= (others => '0');
   reg1CF_in <= (others => '0');
   end generate;
   genD_on: if (inputs_g > 13) generate
   reg1D0_in <= reg1D0;
   reg1D1_in <= reg1D1;
   reg1D2_in <= reg1D2;
   reg1D3_in <= reg1D3;
   reg1D4_in <= reg1D4;
   reg1D5_in <= reg1D5;
   reg1D6_in <= reg1D6;
   reg1D7_in <= reg1D7;
   reg1D8_in <= reg1D8;
   reg1D9_in <= reg1D9;
   reg1DA_in <= reg1DA;
   reg1DB_in <= reg1DB;
   reg1DC_in <= reg1DC;
   reg1DD_in <= reg1DD;
   reg1DE_in <= reg1DE;
   reg1DF_in <= reg1DF;
   end generate;
   genD_off: if (not (inputs_g > 13)) generate
   reg1D0_in <= (others => '0');
   reg1D1_in <= (others => '0');
   reg1D2_in <= (others => '0');
   reg1D3_in <= (others => '0');
   reg1D4_in <= (others => '0');
   reg1D5_in <= (others => '0');
   reg1D6_in <= (others => '0');
   reg1D7_in <= (others => '0');
   reg1D8_in <= (others => '0');
   reg1D9_in <= (others => '0');
   reg1DA_in <= (others => '0');
   reg1DB_in <= (others => '0');
   reg1DC_in <= (others => '0');
   reg1DD_in <= (others => '0');
   reg1DE_in <= (others => '0');
   reg1DF_in <= (others => '0');
   end generate;
   genE_on: if (inputs_g > 14) generate
   reg1E0_in <= reg1E0;
   reg1E1_in <= reg1E1;
   reg1E2_in <= reg1E2;
   reg1E3_in <= reg1E3;
   reg1E4_in <= reg1E4;
   reg1E5_in <= reg1E5;
   reg1E6_in <= reg1E6;
   reg1E7_in <= reg1E7;
   reg1E8_in <= reg1E8;
   reg1E9_in <= reg1E9;
   reg1EA_in <= reg1EA;
   reg1EB_in <= reg1EB;
   reg1EC_in <= reg1EC;
   reg1ED_in <= reg1ED;
   reg1EE_in <= reg1EE;
   reg1EF_in <= reg1EF;
   end generate;
   genE_off: if (not (inputs_g > 14)) generate
   reg1E0_in <= (others => '0');
   reg1E1_in <= (others => '0');
   reg1E2_in <= (others => '0');
   reg1E3_in <= (others => '0');
   reg1E4_in <= (others => '0');
   reg1E5_in <= (others => '0');
   reg1E6_in <= (others => '0');
   reg1E7_in <= (others => '0');
   reg1E8_in <= (others => '0');
   reg1E9_in <= (others => '0');
   reg1EA_in <= (others => '0');
   reg1EB_in <= (others => '0');
   reg1EC_in <= (others => '0');
   reg1ED_in <= (others => '0');
   reg1EE_in <= (others => '0');
   reg1EF_in <= (others => '0');
   end generate;
   genF_on: if (inputs_g > 15) generate
   reg1F0_in <= reg1F0;
   reg1F1_in <= reg1F1;
   reg1F2_in <= reg1F2;
   reg1F3_in <= reg1F3;
   reg1F4_in <= reg1F4;
   reg1F5_in <= reg1F5;
   reg1F6_in <= reg1F6;
   reg1F7_in <= reg1F7;
   reg1F8_in <= reg1F8;
   reg1F9_in <= reg1F9;
   reg1FA_in <= reg1FA;
   reg1FB_in <= reg1FB;
   reg1FC_in <= reg1FC;
   reg1FD_in <= reg1FD;
   reg1FE_in <= reg1FE;
   reg1FF_in <= reg1FF;
   end generate;
   genF_off: if (not (inputs_g > 15)) generate
   reg1F0_in <= (others => '0');
   reg1F1_in <= (others => '0');
   reg1F2_in <= (others => '0');
   reg1F3_in <= (others => '0');
   reg1F4_in <= (others => '0');
   reg1F5_in <= (others => '0');
   reg1F6_in <= (others => '0');
   reg1F7_in <= (others => '0');
   reg1F8_in <= (others => '0');
   reg1F9_in <= (others => '0');
   reg1FA_in <= (others => '0');
   reg1FB_in <= (others => '0');
   reg1FC_in <= (others => '0');
   reg1FD_in <= (others => '0');
   reg1FE_in <= (others => '0');
   reg1FF_in <= (others => '0');
   end generate;

   -- HDL Embedded Text Block 5 register_enables1
   reg_wen <= (others => '1');
   enable <= '1';  
      

   -- HDL Embedded Text Block 14 eb7
   reg_out0 <= reg_dout(128*32-1 downto 0);
   reg_out1 <= reg_dout(256*32-1 downto 128*32);
   
   
   -- writeable register array reg00 .. regFF
   reg000 <= reg_dout(  0*32+31 downto   0*32);
   reg001 <= reg_dout(  1*32+31 downto   1*32);
   reg002 <= reg_dout(  2*32+31 downto   2*32);
   reg003 <= reg_dout(  3*32+31 downto   3*32);
   reg004 <= reg_dout(  4*32+31 downto   4*32);
   reg005 <= reg_dout(  5*32+31 downto   5*32);
   reg006 <= reg_dout(  6*32+31 downto   6*32);
   reg007 <= reg_dout(  7*32+31 downto   7*32);
   reg008 <= reg_dout(  8*32+31 downto   8*32);
   reg009 <= reg_dout(  9*32+31 downto   9*32);
   reg00A <= reg_dout( 10*32+31 downto  10*32);
   reg00B <= reg_dout( 11*32+31 downto  11*32);
   reg00C <= reg_dout( 12*32+31 downto  12*32);
   reg00D <= reg_dout( 13*32+31 downto  13*32);
   reg00E <= reg_dout( 14*32+31 downto  14*32);
   reg00F <= reg_dout( 15*32+31 downto  15*32);
   reg010 <= reg_dout( 16*32+31 downto  16*32);
   reg011 <= reg_dout( 17*32+31 downto  17*32);
   reg012 <= reg_dout( 18*32+31 downto  18*32);
   reg013 <= reg_dout( 19*32+31 downto  19*32);
   reg014 <= reg_dout( 20*32+31 downto  20*32);
   reg015 <= reg_dout( 21*32+31 downto  21*32);
   reg016 <= reg_dout( 22*32+31 downto  22*32);
   reg017 <= reg_dout( 23*32+31 downto  23*32);
   reg018 <= reg_dout( 24*32+31 downto  24*32);
   reg019 <= reg_dout( 25*32+31 downto  25*32);
   reg01A <= reg_dout( 26*32+31 downto  26*32);
   reg01B <= reg_dout( 27*32+31 downto  27*32);
   reg01C <= reg_dout( 28*32+31 downto  28*32);
   reg01D <= reg_dout( 29*32+31 downto  29*32);
   reg01E <= reg_dout( 30*32+31 downto  30*32);
   reg01F <= reg_dout( 31*32+31 downto  31*32);
   reg020 <= reg_dout( 32*32+31 downto  32*32);
   reg021 <= reg_dout( 33*32+31 downto  33*32);
   reg022 <= reg_dout( 34*32+31 downto  34*32);
   reg023 <= reg_dout( 35*32+31 downto  35*32);
   reg024 <= reg_dout( 36*32+31 downto  36*32);
   reg025 <= reg_dout( 37*32+31 downto  37*32);
   reg026 <= reg_dout( 38*32+31 downto  38*32);
   reg027 <= reg_dout( 39*32+31 downto  39*32);
   reg028 <= reg_dout( 40*32+31 downto  40*32);
   reg029 <= reg_dout( 41*32+31 downto  41*32);
   reg02A <= reg_dout( 42*32+31 downto  42*32);
   reg02B <= reg_dout( 43*32+31 downto  43*32);
   reg02C <= reg_dout( 44*32+31 downto  44*32);
   reg02D <= reg_dout( 45*32+31 downto  45*32);
   reg02E <= reg_dout( 46*32+31 downto  46*32);
   reg02F <= reg_dout( 47*32+31 downto  47*32);
   reg030 <= reg_dout( 48*32+31 downto  48*32);
   reg031 <= reg_dout( 49*32+31 downto  49*32);
   reg032 <= reg_dout( 50*32+31 downto  50*32);
   reg033 <= reg_dout( 51*32+31 downto  51*32);
   reg034 <= reg_dout( 52*32+31 downto  52*32);
   reg035 <= reg_dout( 53*32+31 downto  53*32);
   reg036 <= reg_dout( 54*32+31 downto  54*32);
   reg037 <= reg_dout( 55*32+31 downto  55*32);
   reg038 <= reg_dout( 56*32+31 downto  56*32);
   reg039 <= reg_dout( 57*32+31 downto  57*32);
   reg03A <= reg_dout( 58*32+31 downto  58*32);
   reg03B <= reg_dout( 59*32+31 downto  59*32);
   reg03C <= reg_dout( 60*32+31 downto  60*32);
   reg03D <= reg_dout( 61*32+31 downto  61*32);
   reg03E <= reg_dout( 62*32+31 downto  62*32);
   reg03F <= reg_dout( 63*32+31 downto  63*32);
   reg040 <= reg_dout( 64*32+31 downto  64*32);
   reg041 <= reg_dout( 65*32+31 downto  65*32);
   reg042 <= reg_dout( 66*32+31 downto  66*32);
   reg043 <= reg_dout( 67*32+31 downto  67*32);
   reg044 <= reg_dout( 68*32+31 downto  68*32);
   reg045 <= reg_dout( 69*32+31 downto  69*32);
   reg046 <= reg_dout( 70*32+31 downto  70*32);
   reg047 <= reg_dout( 71*32+31 downto  71*32);
   reg048 <= reg_dout( 72*32+31 downto  72*32);
   reg049 <= reg_dout( 73*32+31 downto  73*32);
   reg04A <= reg_dout( 74*32+31 downto  74*32);
   reg04B <= reg_dout( 75*32+31 downto  75*32);
   reg04C <= reg_dout( 76*32+31 downto  76*32);
   reg04D <= reg_dout( 77*32+31 downto  77*32);
   reg04E <= reg_dout( 78*32+31 downto  78*32);
   reg04F <= reg_dout( 79*32+31 downto  79*32);
   reg050 <= reg_dout( 80*32+31 downto  80*32);
   reg051 <= reg_dout( 81*32+31 downto  81*32);
   reg052 <= reg_dout( 82*32+31 downto  82*32);
   reg053 <= reg_dout( 83*32+31 downto  83*32);
   reg054 <= reg_dout( 84*32+31 downto  84*32);
   reg055 <= reg_dout( 85*32+31 downto  85*32);
   reg056 <= reg_dout( 86*32+31 downto  86*32);
   reg057 <= reg_dout( 87*32+31 downto  87*32);
   reg058 <= reg_dout( 88*32+31 downto  88*32);
   reg059 <= reg_dout( 89*32+31 downto  89*32);
   reg05A <= reg_dout( 90*32+31 downto  90*32);
   reg05B <= reg_dout( 91*32+31 downto  91*32);
   reg05C <= reg_dout( 92*32+31 downto  92*32);
   reg05D <= reg_dout( 93*32+31 downto  93*32);
   reg05E <= reg_dout( 94*32+31 downto  94*32);
   reg05F <= reg_dout( 95*32+31 downto  95*32);
   reg060 <= reg_dout( 96*32+31 downto  96*32);
   reg061 <= reg_dout( 97*32+31 downto  97*32);
   reg062 <= reg_dout( 98*32+31 downto  98*32);
   reg063 <= reg_dout( 99*32+31 downto  99*32);
   reg064 <= reg_dout(100*32+31 downto 100*32);
   reg065 <= reg_dout(101*32+31 downto 101*32);
   reg066 <= reg_dout(102*32+31 downto 102*32);
   reg067 <= reg_dout(103*32+31 downto 103*32);
   reg068 <= reg_dout(104*32+31 downto 104*32);
   reg069 <= reg_dout(105*32+31 downto 105*32);
   reg06A <= reg_dout(106*32+31 downto 106*32);
   reg06B <= reg_dout(107*32+31 downto 107*32);
   reg06C <= reg_dout(108*32+31 downto 108*32);
   reg06D <= reg_dout(109*32+31 downto 109*32);
   reg06E <= reg_dout(110*32+31 downto 110*32);
   reg06F <= reg_dout(111*32+31 downto 111*32);
   reg070 <= reg_dout(112*32+31 downto 112*32);
   reg071 <= reg_dout(113*32+31 downto 113*32);
   reg072 <= reg_dout(114*32+31 downto 114*32);
   reg073 <= reg_dout(115*32+31 downto 115*32);
   reg074 <= reg_dout(116*32+31 downto 116*32);
   reg075 <= reg_dout(117*32+31 downto 117*32);
   reg076 <= reg_dout(118*32+31 downto 118*32);
   reg077 <= reg_dout(119*32+31 downto 119*32);
   reg078 <= reg_dout(120*32+31 downto 120*32);
   reg079 <= reg_dout(121*32+31 downto 121*32);
   reg07A <= reg_dout(122*32+31 downto 122*32);
   reg07B <= reg_dout(123*32+31 downto 123*32);
   reg07C <= reg_dout(124*32+31 downto 124*32);
   reg07D <= reg_dout(125*32+31 downto 125*32);
   reg07E <= reg_dout(126*32+31 downto 126*32);
   reg07F <= reg_dout(127*32+31 downto 127*32);
   reg080 <= reg_dout(128*32+31 downto 128*32);
   reg081 <= reg_dout(129*32+31 downto 129*32);
   reg082 <= reg_dout(130*32+31 downto 130*32);
   reg083 <= reg_dout(131*32+31 downto 131*32);
   reg084 <= reg_dout(132*32+31 downto 132*32);
   reg085 <= reg_dout(133*32+31 downto 133*32);
   reg086 <= reg_dout(134*32+31 downto 134*32);
   reg087 <= reg_dout(135*32+31 downto 135*32);
   reg088 <= reg_dout(136*32+31 downto 136*32);
   reg089 <= reg_dout(137*32+31 downto 137*32);
   reg08A <= reg_dout(138*32+31 downto 138*32);
   reg08B <= reg_dout(139*32+31 downto 139*32);
   reg08C <= reg_dout(140*32+31 downto 140*32);
   reg08D <= reg_dout(141*32+31 downto 141*32);
   reg08E <= reg_dout(142*32+31 downto 142*32);
   reg08F <= reg_dout(143*32+31 downto 143*32);
   reg090 <= reg_dout(144*32+31 downto 144*32);
   reg091 <= reg_dout(145*32+31 downto 145*32);
   reg092 <= reg_dout(146*32+31 downto 146*32);
   reg093 <= reg_dout(147*32+31 downto 147*32);
   reg094 <= reg_dout(148*32+31 downto 148*32);
   reg095 <= reg_dout(149*32+31 downto 149*32);
   reg096 <= reg_dout(150*32+31 downto 150*32);
   reg097 <= reg_dout(151*32+31 downto 151*32);
   reg098 <= reg_dout(152*32+31 downto 152*32);
   reg099 <= reg_dout(153*32+31 downto 153*32);
   reg09A <= reg_dout(154*32+31 downto 154*32);
   reg09B <= reg_dout(155*32+31 downto 155*32);
   reg09C <= reg_dout(156*32+31 downto 156*32);
   reg09D <= reg_dout(157*32+31 downto 157*32);
   reg09E <= reg_dout(158*32+31 downto 158*32);
   reg09F <= reg_dout(159*32+31 downto 159*32);
   reg0A0 <= reg_dout(160*32+31 downto 160*32);
   reg0A1 <= reg_dout(161*32+31 downto 161*32);
   reg0A2 <= reg_dout(162*32+31 downto 162*32);
   reg0A3 <= reg_dout(163*32+31 downto 163*32);
   reg0A4 <= reg_dout(164*32+31 downto 164*32);
   reg0A5 <= reg_dout(165*32+31 downto 165*32);
   reg0A6 <= reg_dout(166*32+31 downto 166*32);
   reg0A7 <= reg_dout(167*32+31 downto 167*32);
   reg0A8 <= reg_dout(168*32+31 downto 168*32);
   reg0A9 <= reg_dout(169*32+31 downto 169*32);
   reg0AA <= reg_dout(170*32+31 downto 170*32);
   reg0AB <= reg_dout(171*32+31 downto 171*32);
   reg0AC <= reg_dout(172*32+31 downto 172*32);
   reg0AD <= reg_dout(173*32+31 downto 173*32);
   reg0AE <= reg_dout(174*32+31 downto 174*32);
   reg0AF <= reg_dout(175*32+31 downto 175*32);
   reg0B0 <= reg_dout(176*32+31 downto 176*32);
   reg0B1 <= reg_dout(177*32+31 downto 177*32);
   reg0B2 <= reg_dout(178*32+31 downto 178*32);
   reg0B3 <= reg_dout(179*32+31 downto 179*32);
   reg0B4 <= reg_dout(180*32+31 downto 180*32);
   reg0B5 <= reg_dout(181*32+31 downto 181*32);
   reg0B6 <= reg_dout(182*32+31 downto 182*32);
   reg0B7 <= reg_dout(183*32+31 downto 183*32);
   reg0B8 <= reg_dout(184*32+31 downto 184*32);
   reg0B9 <= reg_dout(185*32+31 downto 185*32);
   reg0BA <= reg_dout(186*32+31 downto 186*32);
   reg0BB <= reg_dout(187*32+31 downto 187*32);
   reg0BC <= reg_dout(188*32+31 downto 188*32);
   reg0BD <= reg_dout(189*32+31 downto 189*32);
   reg0BE <= reg_dout(190*32+31 downto 190*32);
   reg0BF <= reg_dout(191*32+31 downto 191*32);
   reg0C0 <= reg_dout(192*32+31 downto 192*32);
   reg0C1 <= reg_dout(193*32+31 downto 193*32);
   reg0C2 <= reg_dout(194*32+31 downto 194*32);
   reg0C3 <= reg_dout(195*32+31 downto 195*32);
   reg0C4 <= reg_dout(196*32+31 downto 196*32);
   reg0C5 <= reg_dout(197*32+31 downto 197*32);
   reg0C6 <= reg_dout(198*32+31 downto 198*32);
   reg0C7 <= reg_dout(199*32+31 downto 199*32);
   reg0C8 <= reg_dout(200*32+31 downto 200*32);
   reg0C9 <= reg_dout(201*32+31 downto 201*32);
   reg0CA <= reg_dout(202*32+31 downto 202*32);
   reg0CB <= reg_dout(203*32+31 downto 203*32);
   reg0CC <= reg_dout(204*32+31 downto 204*32);
   reg0CD <= reg_dout(205*32+31 downto 205*32);
   reg0CE <= reg_dout(206*32+31 downto 206*32);
   reg0CF <= reg_dout(207*32+31 downto 207*32);
   reg0D0 <= reg_dout(208*32+31 downto 208*32);
   reg0D1 <= reg_dout(209*32+31 downto 209*32);
   reg0D2 <= reg_dout(210*32+31 downto 210*32);
   reg0D3 <= reg_dout(211*32+31 downto 211*32);
   reg0D4 <= reg_dout(212*32+31 downto 212*32);
   reg0D5 <= reg_dout(213*32+31 downto 213*32);
   reg0D6 <= reg_dout(214*32+31 downto 214*32);
   reg0D7 <= reg_dout(215*32+31 downto 215*32);
   reg0D8 <= reg_dout(216*32+31 downto 216*32);
   reg0D9 <= reg_dout(217*32+31 downto 217*32);
   reg0DA <= reg_dout(218*32+31 downto 218*32);
   reg0DB <= reg_dout(219*32+31 downto 219*32);
   reg0DC <= reg_dout(220*32+31 downto 220*32);
   reg0DD <= reg_dout(221*32+31 downto 221*32);
   reg0DE <= reg_dout(222*32+31 downto 222*32);
   reg0DF <= reg_dout(223*32+31 downto 223*32);
   reg0E0 <= reg_dout(224*32+31 downto 224*32);
   reg0E1 <= reg_dout(225*32+31 downto 225*32);
   reg0E2 <= reg_dout(226*32+31 downto 226*32);
   reg0E3 <= reg_dout(227*32+31 downto 227*32);
   reg0E4 <= reg_dout(228*32+31 downto 228*32);
   reg0E5 <= reg_dout(229*32+31 downto 229*32);
   reg0E6 <= reg_dout(230*32+31 downto 230*32);
   reg0E7 <= reg_dout(231*32+31 downto 231*32);
   reg0E8 <= reg_dout(232*32+31 downto 232*32);
   reg0E9 <= reg_dout(233*32+31 downto 233*32);
   reg0EA <= reg_dout(234*32+31 downto 234*32);
   reg0EB <= reg_dout(235*32+31 downto 235*32);
   reg0EC <= reg_dout(236*32+31 downto 236*32);
   reg0ED <= reg_dout(237*32+31 downto 237*32);
   reg0EE <= reg_dout(238*32+31 downto 238*32);
   reg0EF <= reg_dout(239*32+31 downto 239*32);
   reg0F0 <= reg_dout(240*32+31 downto 240*32);
   reg0F1 <= reg_dout(241*32+31 downto 241*32);
   reg0F2 <= reg_dout(242*32+31 downto 242*32);
   reg0F3 <= reg_dout(243*32+31 downto 243*32);
   reg0F4 <= reg_dout(244*32+31 downto 244*32);
   reg0F5 <= reg_dout(245*32+31 downto 245*32);
   reg0F6 <= reg_dout(246*32+31 downto 246*32);
   reg0F7 <= reg_dout(247*32+31 downto 247*32);
   reg0F8 <= reg_dout(248*32+31 downto 248*32);
   reg0F9 <= reg_dout(249*32+31 downto 249*32);
   reg0FA <= reg_dout(250*32+31 downto 250*32);
   reg0FB <= reg_dout(251*32+31 downto 251*32);
   reg0FC <= reg_dout(252*32+31 downto 252*32);
   reg0FD <= reg_dout(253*32+31 downto 253*32);
   reg0FE <= reg_dout(254*32+31 downto 254*32);
   reg0FF <= reg_dout(255*32+31 downto 255*32);
   
    
    
   
   
   
   
   gen0_out: if (outputs_g = 1) generate
   reg_din(511 downto 0) <= reg_dout1(511 downto 0);
   reg_din(8191 downto 512) <= (others => '0');
   end generate;
   gen1_out: if (outputs_g = 2 ) generate
   reg_din(1023 downto 0) <= reg_dout1(1023 downto 0);
   reg_din(8191 downto 1024) <= (others => '0');
   end generate;
   gen2_out: if (outputs_g = 3) generate
   reg_din(1535 downto 0) <= reg_dout1(1535 downto 0);
   reg_din(8191 downto 1536) <= (others => '0');
   end generate;
   gen3_out: if (outputs_g = 4) generate
   reg_din(2047 downto 0) <= reg_dout1(2047 downto 0);
   reg_din(8191 downto 2048) <= (others => '0');
   end generate;
   gen4_out: if (outputs_g = 5) generate
   reg_din(2559 downto 0) <= reg_dout1(2559 downto 0);
   reg_din(8191 downto 2560) <= (others => '0');
   end generate;
   gen5_out: if (outputs_g = 6) generate
   reg_din(3071 downto 0) <= reg_dout1(3071 downto 0);
   reg_din(8191 downto 3072) <= (others => '0');
   end generate;
   gen6_out: if (outputs_g = 7) generate
   reg_din(3583 downto 0) <= reg_dout1(3583 downto 0);
   reg_din(8191 downto 3584) <= (others => '0');
   end generate;
   gen7_out: if (outputs_g = 8) generate
   reg_din(4095 downto 0) <= reg_dout1(4095 downto 0);
   reg_din(8191 downto 4096) <= (others => '0');
   end generate;
   
   gen8_out: if (outputs_g = 9) generate
   reg_din(4607 downto 0) <= reg_dout1(4607 downto 0);
   reg_din(8191 downto 4608) <= (others => '0');
   end generate;
   gen9_out: if (outputs_g = 10) generate
   reg_din(5119 downto 0) <= reg_dout1(5119 downto 0);
   reg_din(8191 downto 5120) <= (others => '0');
   end generate;
   gen10_out: if (outputs_g = 11) generate
   reg_din(5631 downto 0) <= reg_dout1(5631 downto 0);
   reg_din(8191 downto 5632) <= (others => '0');
   end generate;
   gen11_out: if (outputs_g = 12) generate
   reg_din(6143 downto 0) <= reg_dout1(6143 downto 0);
   reg_din(8191 downto 6144) <= (others => '0');
   end generate;
   gen12_out: if (outputs_g = 13) generate
   reg_din(6655 downto 0) <= reg_dout1(6655 downto 0);
   reg_din(8191 downto 6656) <= (others => '0');
   end generate;
   gen13_out: if (outputs_g = 14) generate
   reg_din(7167 downto 0) <= reg_dout1(7167 downto 0);
   reg_din(8191 downto 7168) <= (others => '0');
   end generate;
   gen14_out: if (outputs_g = 15) generate
   reg_din(7679 downto 0) <= reg_dout1(7679 downto 0);
   reg_din(8191 downto 7680) <= (others => '0');
   end generate;
   gen15_out: if (outputs_g = 16) generate
   reg_din(8191 downto 0) <= reg_dout1(8191 downto 0);
   end generate;
   
   
   
   
   
   
   

   -- HDL Embedded Text Block 15 eb8
   g_vec_in : if (use_vectors = true) generate
     reg_input <= reg_in1 & reg_in0;
   end generate;
   
   g_reg_in : if (use_vectors = false) generate
     reg_input <= reg1_din;
   end generate;
   
   -- readable register array --------------------------------------------     
   process(clk)
   begin
     if clk='1' and clk'event then
   reg1_din(32*  0+31 downto 32*  0) <= reg100_in;
   reg1_din(32*  1+31 downto 32*  1) <= reg101_in;
   reg1_din(32*  2+31 downto 32*  2) <= reg102_in;
   reg1_din(32*  3+31 downto 32*  3) <= reg103_in;
   reg1_din(32*  4+31 downto 32*  4) <= reg104_in;
   reg1_din(32*  5+31 downto 32*  5) <= reg105_in;
   reg1_din(32*  6+31 downto 32*  6) <= reg106_in;
   reg1_din(32*  7+31 downto 32*  7) <= reg107_in;
   reg1_din(32*  8+31 downto 32*  8) <= reg108_in;
   reg1_din(32*  9+31 downto 32*  9) <= reg109_in;
   reg1_din(32* 10+31 downto 32* 10) <= reg10A_in;
   reg1_din(32* 11+31 downto 32* 11) <= reg10B_in;
   reg1_din(32* 12+31 downto 32* 12) <= reg10C_in;
   reg1_din(32* 13+31 downto 32* 13) <= reg10D_in;
   reg1_din(32* 14+31 downto 32* 14) <= reg10E_in;
   reg1_din(32* 15+31 downto 32* 15) <= reg10F_in;
   reg1_din(32* 16+31 downto 32* 16) <= reg110_in;
   reg1_din(32* 17+31 downto 32* 17) <= reg111_in;
   reg1_din(32* 18+31 downto 32* 18) <= reg112_in;
   reg1_din(32* 19+31 downto 32* 19) <= reg113_in;
   reg1_din(32* 20+31 downto 32* 20) <= reg114_in;
   reg1_din(32* 21+31 downto 32* 21) <= reg115_in;
   reg1_din(32* 22+31 downto 32* 22) <= reg116_in;
   reg1_din(32* 23+31 downto 32* 23) <= reg117_in;
   reg1_din(32* 24+31 downto 32* 24) <= reg118_in;
   reg1_din(32* 25+31 downto 32* 25) <= reg119_in;
   reg1_din(32* 26+31 downto 32* 26) <= reg11A_in;
   reg1_din(32* 27+31 downto 32* 27) <= reg11B_in;
   reg1_din(32* 28+31 downto 32* 28) <= reg11C_in;
   reg1_din(32* 29+31 downto 32* 29) <= reg11D_in;
   reg1_din(32* 30+31 downto 32* 30) <= reg11E_in;
   reg1_din(32* 31+31 downto 32* 31) <= reg11F_in;
   reg1_din(32* 32+31 downto 32* 32) <= reg120_in;
   reg1_din(32* 33+31 downto 32* 33) <= reg121_in;
   reg1_din(32* 34+31 downto 32* 34) <= reg122_in;
   reg1_din(32* 35+31 downto 32* 35) <= reg123_in;
   reg1_din(32* 36+31 downto 32* 36) <= reg124_in;
   reg1_din(32* 37+31 downto 32* 37) <= reg125_in;
   reg1_din(32* 38+31 downto 32* 38) <= reg126_in;
   reg1_din(32* 39+31 downto 32* 39) <= reg127_in;
   reg1_din(32* 40+31 downto 32* 40) <= reg128_in;
   reg1_din(32* 41+31 downto 32* 41) <= reg129_in;
   reg1_din(32* 42+31 downto 32* 42) <= reg12A_in;
   reg1_din(32* 43+31 downto 32* 43) <= reg12B_in;
   reg1_din(32* 44+31 downto 32* 44) <= reg12C_in;
   reg1_din(32* 45+31 downto 32* 45) <= reg12D_in;
   reg1_din(32* 46+31 downto 32* 46) <= reg12E_in;
   reg1_din(32* 47+31 downto 32* 47) <= reg12F_in;
   reg1_din(32* 48+31 downto 32* 48) <= reg130_in;
   reg1_din(32* 49+31 downto 32* 49) <= reg131_in;
   reg1_din(32* 50+31 downto 32* 50) <= reg132_in;
   reg1_din(32* 51+31 downto 32* 51) <= reg133_in;
   reg1_din(32* 52+31 downto 32* 52) <= reg134_in;
   reg1_din(32* 53+31 downto 32* 53) <= reg135_in;
   reg1_din(32* 54+31 downto 32* 54) <= reg136_in;
   reg1_din(32* 55+31 downto 32* 55) <= reg137_in;
   reg1_din(32* 56+31 downto 32* 56) <= reg138_in;
   reg1_din(32* 57+31 downto 32* 57) <= reg139_in;
   reg1_din(32* 58+31 downto 32* 58) <= reg13A_in;
   reg1_din(32* 59+31 downto 32* 59) <= reg13B_in;
   reg1_din(32* 60+31 downto 32* 60) <= reg13C_in;
   reg1_din(32* 61+31 downto 32* 61) <= reg13D_in;
   reg1_din(32* 62+31 downto 32* 62) <= reg13E_in;
   reg1_din(32* 63+31 downto 32* 63) <= reg13F_in;
   reg1_din(32* 64+31 downto 32* 64) <= reg140_in;
   reg1_din(32* 65+31 downto 32* 65) <= reg141_in;
   reg1_din(32* 66+31 downto 32* 66) <= reg142_in;
   reg1_din(32* 67+31 downto 32* 67) <= reg143_in;
   reg1_din(32* 68+31 downto 32* 68) <= reg144_in;
   reg1_din(32* 69+31 downto 32* 69) <= reg145_in;
   reg1_din(32* 70+31 downto 32* 70) <= reg146_in;
   reg1_din(32* 71+31 downto 32* 71) <= reg147_in;
   reg1_din(32* 72+31 downto 32* 72) <= reg148_in;
   reg1_din(32* 73+31 downto 32* 73) <= reg149_in;
   reg1_din(32* 74+31 downto 32* 74) <= reg14A_in;
   reg1_din(32* 75+31 downto 32* 75) <= reg14B_in;
   reg1_din(32* 76+31 downto 32* 76) <= reg14C_in;
   reg1_din(32* 77+31 downto 32* 77) <= reg14D_in;
   reg1_din(32* 78+31 downto 32* 78) <= reg14E_in;
   reg1_din(32* 79+31 downto 32* 79) <= reg14F_in;
   reg1_din(32* 80+31 downto 32* 80) <= reg150_in;
   reg1_din(32* 81+31 downto 32* 81) <= reg151_in;
   reg1_din(32* 82+31 downto 32* 82) <= reg152_in;
   reg1_din(32* 83+31 downto 32* 83) <= reg153_in;
   reg1_din(32* 84+31 downto 32* 84) <= reg154_in;
   reg1_din(32* 85+31 downto 32* 85) <= reg155_in;
   reg1_din(32* 86+31 downto 32* 86) <= reg156_in;
   reg1_din(32* 87+31 downto 32* 87) <= reg157_in;
   reg1_din(32* 88+31 downto 32* 88) <= reg158_in;
   reg1_din(32* 89+31 downto 32* 89) <= reg159_in;
   reg1_din(32* 90+31 downto 32* 90) <= reg15A_in;
   reg1_din(32* 91+31 downto 32* 91) <= reg15B_in;
   reg1_din(32* 92+31 downto 32* 92) <= reg15C_in;
   reg1_din(32* 93+31 downto 32* 93) <= reg15D_in;
   reg1_din(32* 94+31 downto 32* 94) <= reg15E_in;
   reg1_din(32* 95+31 downto 32* 95) <= reg15F_in;
   reg1_din(32* 96+31 downto 32* 96) <= reg160_in;
   reg1_din(32* 97+31 downto 32* 97) <= reg161_in;
   reg1_din(32* 98+31 downto 32* 98) <= reg162_in;
   reg1_din(32* 99+31 downto 32* 99) <= reg163_in;
   reg1_din(32*100+31 downto 32*100) <= reg164_in;
   reg1_din(32*101+31 downto 32*101) <= reg165_in;
   reg1_din(32*102+31 downto 32*102) <= reg166_in;
   reg1_din(32*103+31 downto 32*103) <= reg167_in;
   reg1_din(32*104+31 downto 32*104) <= reg168_in;
   reg1_din(32*105+31 downto 32*105) <= reg169_in;
   reg1_din(32*106+31 downto 32*106) <= reg16A_in;
   reg1_din(32*107+31 downto 32*107) <= reg16B_in;
   reg1_din(32*108+31 downto 32*108) <= reg16C_in;
   reg1_din(32*109+31 downto 32*109) <= reg16D_in;
   reg1_din(32*110+31 downto 32*110) <= reg16E_in;
   reg1_din(32*111+31 downto 32*111) <= reg16F_in;
   reg1_din(32*112+31 downto 32*112) <= reg170_in;
   reg1_din(32*113+31 downto 32*113) <= reg171_in;
   reg1_din(32*114+31 downto 32*114) <= reg172_in;
   reg1_din(32*115+31 downto 32*115) <= reg173_in;
   reg1_din(32*116+31 downto 32*116) <= reg174_in;
   reg1_din(32*117+31 downto 32*117) <= reg175_in;
   reg1_din(32*118+31 downto 32*118) <= reg176_in;
   reg1_din(32*119+31 downto 32*119) <= reg177_in;
   reg1_din(32*120+31 downto 32*120) <= reg178_in;
   reg1_din(32*121+31 downto 32*121) <= reg179_in;
   reg1_din(32*122+31 downto 32*122) <= reg17A_in;
   reg1_din(32*123+31 downto 32*123) <= reg17B_in;
   reg1_din(32*124+31 downto 32*124) <= reg17C_in;
   reg1_din(32*125+31 downto 32*125) <= reg17D_in;
   reg1_din(32*126+31 downto 32*126) <= reg17E_in;
   reg1_din(32*127+31 downto 32*127) <= reg17F_in;
   reg1_din(32*128+31 downto 32*128) <= reg180_in;
   reg1_din(32*129+31 downto 32*129) <= reg181_in;
   reg1_din(32*130+31 downto 32*130) <= reg182_in;
   reg1_din(32*131+31 downto 32*131) <= reg183_in;
   reg1_din(32*132+31 downto 32*132) <= reg184_in;
   reg1_din(32*133+31 downto 32*133) <= reg185_in;
   reg1_din(32*134+31 downto 32*134) <= reg186_in;
   reg1_din(32*135+31 downto 32*135) <= reg187_in;
   reg1_din(32*136+31 downto 32*136) <= reg188_in;
   reg1_din(32*137+31 downto 32*137) <= reg189_in;
   reg1_din(32*138+31 downto 32*138) <= reg18A_in;
   reg1_din(32*139+31 downto 32*139) <= reg18B_in;
   reg1_din(32*140+31 downto 32*140) <= reg18C_in;
   reg1_din(32*141+31 downto 32*141) <= reg18D_in;
   reg1_din(32*142+31 downto 32*142) <= reg18E_in;
   reg1_din(32*143+31 downto 32*143) <= reg18F_in;
   reg1_din(32*144+31 downto 32*144) <= reg190_in;
   reg1_din(32*145+31 downto 32*145) <= reg191_in;
   reg1_din(32*146+31 downto 32*146) <= reg192_in;
   reg1_din(32*147+31 downto 32*147) <= reg193_in;
   reg1_din(32*148+31 downto 32*148) <= reg194_in;
   reg1_din(32*149+31 downto 32*149) <= reg195_in;
   reg1_din(32*150+31 downto 32*150) <= reg196_in;
   reg1_din(32*151+31 downto 32*151) <= reg197_in;
   reg1_din(32*152+31 downto 32*152) <= reg198_in;
   reg1_din(32*153+31 downto 32*153) <= reg199_in;
   reg1_din(32*154+31 downto 32*154) <= reg19A_in;
   reg1_din(32*155+31 downto 32*155) <= reg19B_in;
   reg1_din(32*156+31 downto 32*156) <= reg19C_in;
   reg1_din(32*157+31 downto 32*157) <= reg19D_in;
   reg1_din(32*158+31 downto 32*158) <= reg19E_in;
   reg1_din(32*159+31 downto 32*159) <= reg19F_in;
   reg1_din(32*160+31 downto 32*160) <= reg1A0_in;
   reg1_din(32*161+31 downto 32*161) <= reg1A1_in;
   reg1_din(32*162+31 downto 32*162) <= reg1A2_in;
   reg1_din(32*163+31 downto 32*163) <= reg1A3_in;
   reg1_din(32*164+31 downto 32*164) <= reg1A4_in;
   reg1_din(32*165+31 downto 32*165) <= reg1A5_in;
   reg1_din(32*166+31 downto 32*166) <= reg1A6_in;
   reg1_din(32*167+31 downto 32*167) <= reg1A7_in;
   reg1_din(32*168+31 downto 32*168) <= reg1A8_in;
   reg1_din(32*169+31 downto 32*169) <= reg1A9_in;
   reg1_din(32*170+31 downto 32*170) <= reg1AA_in;
   reg1_din(32*171+31 downto 32*171) <= reg1AB_in;
   reg1_din(32*172+31 downto 32*172) <= reg1AC_in;
   reg1_din(32*173+31 downto 32*173) <= reg1AD_in;
   reg1_din(32*174+31 downto 32*174) <= reg1AE_in;
   reg1_din(32*175+31 downto 32*175) <= reg1AF_in;
   reg1_din(32*176+31 downto 32*176) <= reg1B0_in;
   reg1_din(32*177+31 downto 32*177) <= reg1B1_in;
   reg1_din(32*178+31 downto 32*178) <= reg1B2_in;
   reg1_din(32*179+31 downto 32*179) <= reg1B3_in;
   reg1_din(32*180+31 downto 32*180) <= reg1B4_in;
   reg1_din(32*181+31 downto 32*181) <= reg1B5_in;
   reg1_din(32*182+31 downto 32*182) <= reg1B6_in;
   reg1_din(32*183+31 downto 32*183) <= reg1B7_in;
   reg1_din(32*184+31 downto 32*184) <= reg1B8_in;
   reg1_din(32*185+31 downto 32*185) <= reg1B9_in;
   reg1_din(32*186+31 downto 32*186) <= reg1BA_in;
   reg1_din(32*187+31 downto 32*187) <= reg1BB_in;
   reg1_din(32*188+31 downto 32*188) <= reg1BC_in;
   reg1_din(32*189+31 downto 32*189) <= reg1BD_in;
   reg1_din(32*190+31 downto 32*190) <= reg1BE_in;
   reg1_din(32*191+31 downto 32*191) <= reg1BF_in;
   reg1_din(32*192+31 downto 32*192) <= reg1C0_in;
   reg1_din(32*193+31 downto 32*193) <= reg1C1_in;
   reg1_din(32*194+31 downto 32*194) <= reg1C2_in;
   reg1_din(32*195+31 downto 32*195) <= reg1C3_in;
   reg1_din(32*196+31 downto 32*196) <= reg1C4_in;
   reg1_din(32*197+31 downto 32*197) <= reg1C5_in;
   reg1_din(32*198+31 downto 32*198) <= reg1C6_in;
   reg1_din(32*199+31 downto 32*199) <= reg1C7_in;
   reg1_din(32*200+31 downto 32*200) <= reg1C8_in;
   reg1_din(32*201+31 downto 32*201) <= reg1C9_in;
   reg1_din(32*202+31 downto 32*202) <= reg1CA_in;
   reg1_din(32*203+31 downto 32*203) <= reg1CB_in;
   reg1_din(32*204+31 downto 32*204) <= reg1CC_in;
   reg1_din(32*205+31 downto 32*205) <= reg1CD_in;
   reg1_din(32*206+31 downto 32*206) <= reg1CE_in;
   reg1_din(32*207+31 downto 32*207) <= reg1CF_in;
   reg1_din(32*208+31 downto 32*208) <= reg1D0_in;
   reg1_din(32*209+31 downto 32*209) <= reg1D1_in;
   reg1_din(32*210+31 downto 32*210) <= reg1D2_in;
   reg1_din(32*211+31 downto 32*211) <= reg1D3_in;
   reg1_din(32*212+31 downto 32*212) <= reg1D4_in;
   reg1_din(32*213+31 downto 32*213) <= reg1D5_in;
   reg1_din(32*214+31 downto 32*214) <= reg1D6_in;
   reg1_din(32*215+31 downto 32*215) <= reg1D7_in;
   reg1_din(32*216+31 downto 32*216) <= reg1D8_in;
   reg1_din(32*217+31 downto 32*217) <= reg1D9_in;
   reg1_din(32*218+31 downto 32*218) <= reg1DA_in;
   reg1_din(32*219+31 downto 32*219) <= reg1DB_in;
   reg1_din(32*220+31 downto 32*220) <= reg1DC_in;
   reg1_din(32*221+31 downto 32*221) <= reg1DD_in;
   reg1_din(32*222+31 downto 32*222) <= reg1DE_in;
   reg1_din(32*223+31 downto 32*223) <= reg1DF_in;
   reg1_din(32*224+31 downto 32*224) <= reg1E0_in;
   reg1_din(32*225+31 downto 32*225) <= reg1E1_in;
   reg1_din(32*226+31 downto 32*226) <= reg1E2_in;
   reg1_din(32*227+31 downto 32*227) <= reg1E3_in;
   reg1_din(32*228+31 downto 32*228) <= reg1E4_in;
   reg1_din(32*229+31 downto 32*229) <= reg1E5_in;
   reg1_din(32*230+31 downto 32*230) <= reg1E6_in;
   reg1_din(32*231+31 downto 32*231) <= reg1E7_in;
   reg1_din(32*232+31 downto 32*232) <= reg1E8_in;
   reg1_din(32*233+31 downto 32*233) <= reg1E9_in;
   reg1_din(32*234+31 downto 32*234) <= reg1EA_in;
   reg1_din(32*235+31 downto 32*235) <= reg1EB_in;
   reg1_din(32*236+31 downto 32*236) <= reg1EC_in;
   reg1_din(32*237+31 downto 32*237) <= reg1ED_in;
   reg1_din(32*238+31 downto 32*238) <= reg1EE_in;
   reg1_din(32*239+31 downto 32*239) <= reg1EF_in;
   reg1_din(32*240+31 downto 32*240) <= reg1F0_in;
   reg1_din(32*241+31 downto 32*241) <= reg1F1_in;
   reg1_din(32*242+31 downto 32*242) <= reg1F2_in;
   reg1_din(32*243+31 downto 32*243) <= reg1F3_in;
   reg1_din(32*244+31 downto 32*244) <= reg1F4_in;
   reg1_din(32*245+31 downto 32*245) <= reg1F5_in;
   reg1_din(32*246+31 downto 32*246) <= reg1F6_in;
   reg1_din(32*247+31 downto 32*247) <= reg1F7_in;
   reg1_din(32*248+31 downto 32*248) <= reg1F8_in;
   reg1_din(32*249+31 downto 32*249) <= reg1F9_in;
   reg1_din(32*250+31 downto 32*250) <= reg1FA_in;
   reg1_din(32*251+31 downto 32*251) <= reg1FB_in;
   reg1_din(32*252+31 downto 32*252) <= reg1FC_in;
   reg1_din(32*253+31 downto 32*253) <= reg1FD_in;
   reg1_din(32*254+31 downto 32*254) <= reg1FE_in;
   reg1_din(32*255+31 downto 32*255) <= reg1FF_in;
   
     end if;
   end process;    
   
   
   
   
   
   
   
   
   
   
   
   
   


   -- Instance port mappings.
   U_8 : arbiter11_32
      PORT MAP (
         mbus0_i   => mbusB_i,
         mbus1_i   => mbusA_i,
         mbus0_o   => mbusB_o,
         mbus1_o   => mbusA_o,
         sbus_i    => sbus_i,
         sbus0_o   => sbus0_o,
         sbus1_o   => sbus1_o,
         sbus2_o   => sbus_null,
         sbus3_o   => sbus_null,
         sbus4_o   => sbus_null,
         sbus5_o   => sbus_null,
         sbus6_o   => sbus_null,
         sbus7_o   => sbus_null,
         sbus8_o   => sbus_null,
         sbus9_o   => sbus_null,
         sbus10_o  => sbus_null,
         mbus_null => OPEN,
         sbus_null => sbus_null,
         reset     => reset_s,
         clk       => clk
      );
   U_5 : delay_e_vector
      GENERIC MAP (
         DELAY_CLK_CYCLES => reg_pipe_in_g,
         WIDTH            => 256*32,
         RST_TO           => '0'
      )
      PORT MAP (
         clk    => clk,
         reset  => reset_s,
         enable => enable,
         input  => reg_input,
         output => reg1_din1
      );
   -- Register Pipelining
   -- 
   U_reg_pipe_out : delay_e_vector
      GENERIC MAP (
         DELAY_CLK_CYCLES => reg_pipe_out_g,
         WIDTH            => 256*32,
         RST_TO           => '0'
      )
      PORT MAP (
         clk    => clk,
         reset  => reset_s,
         enable => enable,
         input  => reg_dout1,
         output => reg_dout
      );
   U_6 : delay_mbus32
      GENERIC MAP (
         DELAY_CYCLES => mbus_pipe_g
      )
      PORT MAP (
         clk     => clk,
         mbus_iB => mbusB_i,
         mbus_o  => mbus1_o,
         rst     => reset_s,
         mbus_i  => mbus1_i,
         mbus_oB => mbusB_o
      );
   U_7 : delay_mbus32
      GENERIC MAP (
         DELAY_CYCLES => mbus_pipe_g
      )
      PORT MAP (
         clk     => clk,
         mbus_iB => mbusA_i,
         mbus_o  => mbus0_o,
         rst     => reset_s,
         mbus_i  => mbus0_i,
         mbus_oB => mbusA_o
      );
   U_9 : delay_sbus32
      GENERIC MAP (
         DELAY_CYCLES => mbus_pipe_g
      )
      PORT MAP (
         clk     => clk,
         rst     => reset_s,
         sbus_i  => sbus_i,
         sbus_oB => sbus_oB2,
         sbus_iB => sbus_i2,
         sbus_o  => sbus0_o
      );
   U_10 : delay_sbus32
      GENERIC MAP (
         DELAY_CYCLES => mbus_pipe_g
      )
      PORT MAP (
         clk     => clk,
         rst     => reset_s,
         sbus_i  => sbus_i,
         sbus_oB => sbus_oB1,
         sbus_iB => sbus_i1,
         sbus_o  => sbus1_o
      );
   U_11 : register_array_b32
      GENERIC MAP (
         addr_width_g => 16,          --width of address
         data_width_g => 32,          --width of data
         addr_base_g  => X"0000",
         addr_range_g => X"0100",
         nregs_g      => 256,         --number of registers
         init_val_g   => init_val32_c
      )
      PORT MAP (
         sbus_o   => sbus_oB2,
         sbus_i   => sbus_i2,
         reg_din  => reg_din,
         reg_dout => reg_dout1,
         we       => we_out_regs,
         rd       => rd_out_regs,
         reg_wen  => reg_wen,
         reset    => reset_s,
         clk      => clk
      );
   U_12 : register_array_b32
      GENERIC MAP (
         addr_width_g => 16,          --width of address
         data_width_g => 32,          --width of data
         addr_base_g  => X"0100",
         addr_range_g => X"0100",
         nregs_g      => 256,         --number of registers
         init_val_g   => init_val32_c
      )
      PORT MAP (
         sbus_o   => sbus_oB1,
         sbus_i   => sbus_i1,
         reg_din  => reg1_din1,
         reg_dout => OPEN,
         we       => OPEN,
         rd       => rd_in_regs,
         reg_wen  => reg_wen,
         reset    => reset_s,
         clk      => clk
      );
   U_0 : syn2_vector
      GENERIC MAP (
         sig_width => 256
      )
      PORT MAP (
         clk     => clk,
         rst     => reset_s,
         inputA  => we_out_regs,
         outputA => OPEN,
         rise    => output_written,
         fall    => OPEN,
         any     => OPEN
      );
   U_1 : syn2_vector
      GENERIC MAP (
         sig_width => 256
      )
      PORT MAP (
         clk     => clk,
         rst     => reset_s,
         inputA  => rd_out_regs,
         outputA => OPEN,
         rise    => output_read,
         fall    => OPEN,
         any     => OPEN
      );
   U_2 : syn2_vector
      GENERIC MAP (
         sig_width => 256
      )
      PORT MAP (
         clk     => clk,
         rst     => reset_s,
         inputA  => rd_in_regs,
         outputA => OPEN,
         rise    => input_read,
         fall    => OPEN,
         any     => OPEN
      );
   U_3 : uart_bridge_32
      GENERIC MAP (
         core_clk_freq_g => core_clk_freq_g,
         baudrate_g      => baudrate_g,
         simulate_g      => simulate1_g,
         commandfile_g   => commandfile_g
      )
      PORT MAP (
         clk    => clk,
         mbus_i => mbus1_i,
         reset  => reset_s,
         rxd    => uartB_rxd,
         mbus_o => mbus1_o,
         txd    => uartB_txd
      );
   U_4 : uart_bridge_32
      GENERIC MAP (
         core_clk_freq_g => core_clk_freq_g,
         baudrate_g      => baudrate_g,
         simulate_g      => simulate0_g,
         commandfile_g   => commandfile_g
      )
      PORT MAP (
         clk    => clk,
         mbus_i => mbus0_i,
         reset  => reset_s,
         rxd    => uartA_rxd,
         mbus_o => mbus0_o,
         txd    => uartA_txd
      );

END struct;
