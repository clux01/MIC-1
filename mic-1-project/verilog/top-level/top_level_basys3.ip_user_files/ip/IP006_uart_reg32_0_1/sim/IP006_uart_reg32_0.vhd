-- (c) Copyright 1995-2023 Xilinx, Inc. All rights reserved.
-- 
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
-- 
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
-- 
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
-- 
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES.
-- 
-- DO NOT MODIFY THIS FILE.

-- IP VLNV: fh-joanneum.local:user:IP006_uart_reg32:1.2
-- IP Revision: 8

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

LIBRARY IP006_lib;
USE IP006_lib.IP006_uart_reg32;

ENTITY IP006_uart_reg32_0 IS
  PORT (
    clk : IN STD_LOGIC;
    reg100 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg101 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg102 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg103 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg104 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg105 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg106 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg107 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg108 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg109 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg10A : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg10B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg10C : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg10D : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg10E : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg10F : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    reset_s : IN STD_LOGIC;
    uartA_rxd : IN STD_LOGIC;
    uartB_rxd : IN STD_LOGIC;
    input_read : OUT STD_LOGIC_VECTOR(255 DOWNTO 0);
    output_read : OUT STD_LOGIC_VECTOR(255 DOWNTO 0);
    output_written : OUT STD_LOGIC_VECTOR(255 DOWNTO 0);
    reg000 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg001 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg002 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg003 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg004 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg005 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg006 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg007 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg008 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg009 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg00A : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg00B : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg00C : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg00D : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg00E : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    reg00F : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    uartA_txd : OUT STD_LOGIC;
    uartB_txd : OUT STD_LOGIC
  );
END IP006_uart_reg32_0;

ARCHITECTURE IP006_uart_reg32_0_arch OF IP006_uart_reg32_0 IS
  ATTRIBUTE DowngradeIPIdentifiedWarnings : STRING;
  ATTRIBUTE DowngradeIPIdentifiedWarnings OF IP006_uart_reg32_0_arch: ARCHITECTURE IS "yes";
  COMPONENT IP006_uart_reg32 IS
    GENERIC (
      inputs_g : INTEGER;
      outputs_g : INTEGER;
      core_clk_freq_g : INTEGER;
      baudrate_g : INTEGER;
      simulate0_g : BOOLEAN;
      simulate1_g : BOOLEAN;
      commandfile_g : STRING;
      mbus_pipe_g : INTEGER;
      use_vectors : BOOLEAN;
      reg_pipe_out_g : INTEGER;
      reg_pipe_in_g : INTEGER
    );
    PORT (
      clk : IN STD_LOGIC;
      reg100 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg101 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg102 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg103 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg104 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg105 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg106 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg107 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg108 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg109 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg10A : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg10B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg10C : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg10D : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg10E : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg10F : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg110 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg111 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg112 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg113 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg114 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg115 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg116 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg117 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg118 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg119 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg11A : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg11B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg11C : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg11D : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg11E : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg11F : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg120 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg121 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg122 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg123 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg124 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg125 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg126 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg127 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg128 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg129 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg12A : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg12B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg12C : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg12D : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg12E : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg12F : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg130 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg131 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg132 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg133 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg134 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg135 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg136 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg137 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg138 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg139 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg13A : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg13B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg13C : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg13D : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg13E : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg13F : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg140 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg141 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg142 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg143 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg144 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg145 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg146 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg147 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg148 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg149 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg14A : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg14B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg14C : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg14D : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg14E : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg14F : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg150 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg151 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg152 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg153 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg154 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg155 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg156 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg157 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg158 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg159 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg15A : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg15B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg15C : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg15D : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg15E : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg15F : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg160 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg161 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg162 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg163 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg164 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg165 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg166 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg167 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg168 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg169 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg16A : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg16B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg16C : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg16D : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg16E : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg16F : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg170 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg171 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg172 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg173 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg174 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg175 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg176 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg177 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg178 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg179 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg17A : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg17B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg17C : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg17D : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg17E : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg17F : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg180 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg181 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg182 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg183 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg184 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg185 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg186 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg187 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg188 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg189 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg18A : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg18B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg18C : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg18D : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg18E : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg18F : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg190 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg191 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg192 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg193 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg194 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg195 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg196 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg197 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg198 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg199 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg19A : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg19B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg19C : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg19D : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg19E : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg19F : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1A0 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1A1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1A2 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1A3 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1A4 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1A5 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1A6 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1A7 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1A8 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1A9 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1AA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1AB : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1AC : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1AD : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1AE : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1AF : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1B0 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1B1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1B2 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1B3 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1B4 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1B5 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1B6 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1B7 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1B8 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1B9 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1BA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1BB : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1BC : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1BD : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1BE : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1BF : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1C0 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1C1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1C2 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1C3 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1C4 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1C5 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1C6 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1C7 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1C8 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1C9 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1CA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1CB : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1CC : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1CD : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1CE : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1CF : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1D0 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1D1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1D2 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1D3 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1D4 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1D5 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1D6 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1D7 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1D8 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1D9 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1DA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1DB : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1DC : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1DD : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1DE : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1DF : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1E0 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1E1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1E2 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1E3 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1E4 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1E5 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1E6 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1E7 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1E8 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1E9 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1EA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1EB : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1EC : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1ED : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1EE : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1EF : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1F0 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1F1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1F2 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1F3 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1F4 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1F5 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1F6 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1F7 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1F8 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1F9 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1FA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1FB : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1FC : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1FD : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1FE : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg1FF : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg_in0 : IN STD_LOGIC_VECTOR(4095 DOWNTO 0);
      reg_in1 : IN STD_LOGIC_VECTOR(4095 DOWNTO 0);
      reset_s : IN STD_LOGIC;
      uartA_rxd : IN STD_LOGIC;
      uartB_rxd : IN STD_LOGIC;
      input_read : OUT STD_LOGIC_VECTOR(255 DOWNTO 0);
      output_read : OUT STD_LOGIC_VECTOR(255 DOWNTO 0);
      output_written : OUT STD_LOGIC_VECTOR(255 DOWNTO 0);
      reg000 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg001 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg002 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg003 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg004 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg005 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg006 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg007 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg008 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg009 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg00A : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg00B : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg00C : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg00D : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg00E : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg00F : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg010 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg011 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg012 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg013 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg014 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg015 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg016 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg017 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg018 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg019 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg01A : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg01B : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg01C : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg01D : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg01E : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg01F : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg020 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg021 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg022 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg023 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg024 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg025 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg026 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg027 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg028 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg029 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg02A : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg02B : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg02C : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg02D : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg02E : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg02F : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg030 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg031 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg032 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg033 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg034 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg035 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg036 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg037 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg038 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg039 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg03A : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg03B : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg03C : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg03D : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg03E : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg03F : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg040 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg041 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg042 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg043 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg044 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg045 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg046 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg047 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg048 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg049 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg04A : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg04B : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg04C : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg04D : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg04E : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg04F : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg050 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg051 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg052 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg053 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg054 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg055 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg056 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg057 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg058 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg059 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg05A : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg05B : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg05C : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg05D : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg05E : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg05F : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg060 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg061 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg062 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg063 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg064 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg065 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg066 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg067 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg068 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg069 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg06A : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg06B : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg06C : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg06D : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg06E : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg06F : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg070 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg071 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg072 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg073 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg074 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg075 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg076 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg077 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg078 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg079 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg07A : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg07B : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg07C : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg07D : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg07E : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg07F : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg080 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg081 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg082 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg083 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg084 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg085 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg086 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg087 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg088 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg089 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg08A : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg08B : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg08C : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg08D : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg08E : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg08F : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg090 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg091 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg092 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg093 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg094 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg095 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg096 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg097 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg098 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg099 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg09A : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg09B : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg09C : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg09D : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg09E : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg09F : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0A0 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0A1 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0A2 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0A3 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0A4 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0A5 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0A6 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0A7 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0A8 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0A9 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0AA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0AB : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0AC : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0AD : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0AE : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0AF : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0B0 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0B1 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0B2 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0B3 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0B4 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0B5 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0B6 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0B7 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0B8 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0B9 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0BA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0BB : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0BC : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0BD : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0BE : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0BF : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0C0 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0C1 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0C2 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0C3 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0C4 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0C5 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0C6 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0C7 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0C8 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0C9 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0CA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0CB : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0CC : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0CD : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0CE : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0CF : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0D0 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0D1 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0D2 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0D3 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0D4 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0D5 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0D6 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0D7 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0D8 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0D9 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0DA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0DB : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0DC : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0DD : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0DE : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0DF : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0E0 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0E1 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0E2 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0E3 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0E4 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0E5 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0E6 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0E7 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0E8 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0E9 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0EA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0EB : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0EC : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0ED : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0EE : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0EF : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0F0 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0F1 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0F2 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0F3 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0F4 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0F5 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0F6 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0F7 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0F8 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0F9 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0FA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0FB : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0FC : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0FD : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0FE : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg0FF : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      reg_out0 : OUT STD_LOGIC_VECTOR(4095 DOWNTO 0);
      reg_out1 : OUT STD_LOGIC_VECTOR(4095 DOWNTO 0);
      uartA_txd : OUT STD_LOGIC;
      uartB_txd : OUT STD_LOGIC
    );
  END COMPONENT IP006_uart_reg32;
  ATTRIBUTE X_INTERFACE_INFO : STRING;
  ATTRIBUTE X_INTERFACE_PARAMETER : STRING;
  ATTRIBUTE X_INTERFACE_PARAMETER OF clk: SIGNAL IS "XIL_INTERFACENAME clk, ASSOCIATED_RESET reset_s, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.0, INSERT_VIP 0";
  ATTRIBUTE X_INTERFACE_INFO OF clk: SIGNAL IS "xilinx.com:signal:clock:1.0 clk CLK";
  ATTRIBUTE X_INTERFACE_INFO OF reg000: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**0";
  ATTRIBUTE X_INTERFACE_INFO OF reg001: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**1";
  ATTRIBUTE X_INTERFACE_INFO OF reg002: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**2";
  ATTRIBUTE X_INTERFACE_INFO OF reg003: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**3";
  ATTRIBUTE X_INTERFACE_INFO OF reg004: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**4";
  ATTRIBUTE X_INTERFACE_INFO OF reg005: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**5";
  ATTRIBUTE X_INTERFACE_INFO OF reg006: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**6";
  ATTRIBUTE X_INTERFACE_INFO OF reg007: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**7";
  ATTRIBUTE X_INTERFACE_INFO OF reg008: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**8";
  ATTRIBUTE X_INTERFACE_INFO OF reg009: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**9";
  ATTRIBUTE X_INTERFACE_INFO OF reg00A: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**A";
  ATTRIBUTE X_INTERFACE_INFO OF reg00B: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**B";
  ATTRIBUTE X_INTERFACE_INFO OF reg00C: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**C";
  ATTRIBUTE X_INTERFACE_INFO OF reg00D: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**D";
  ATTRIBUTE X_INTERFACE_INFO OF reg00E: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**E";
  ATTRIBUTE X_INTERFACE_INFO OF reg00F: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 OUT_0 reg**F";
  ATTRIBUTE X_INTERFACE_INFO OF reg100: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**0";
  ATTRIBUTE X_INTERFACE_INFO OF reg101: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**1";
  ATTRIBUTE X_INTERFACE_INFO OF reg102: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**2";
  ATTRIBUTE X_INTERFACE_INFO OF reg103: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**3";
  ATTRIBUTE X_INTERFACE_INFO OF reg104: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**4";
  ATTRIBUTE X_INTERFACE_INFO OF reg105: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**5";
  ATTRIBUTE X_INTERFACE_INFO OF reg106: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**6";
  ATTRIBUTE X_INTERFACE_INFO OF reg107: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**7";
  ATTRIBUTE X_INTERFACE_INFO OF reg108: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**8";
  ATTRIBUTE X_INTERFACE_INFO OF reg109: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**9";
  ATTRIBUTE X_INTERFACE_INFO OF reg10A: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**A";
  ATTRIBUTE X_INTERFACE_INFO OF reg10B: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**B";
  ATTRIBUTE X_INTERFACE_INFO OF reg10C: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**C";
  ATTRIBUTE X_INTERFACE_INFO OF reg10D: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**D";
  ATTRIBUTE X_INTERFACE_INFO OF reg10E: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**E";
  ATTRIBUTE X_INTERFACE_INFO OF reg10F: SIGNAL IS "fh-joanneum.local:user:reg_16port_32bit:1.0 IN_0 reg**F";
  ATTRIBUTE X_INTERFACE_PARAMETER OF reset_s: SIGNAL IS "XIL_INTERFACENAME reset_s, POLARITY ACTIVE_HIGH, INSERT_VIP 0";
  ATTRIBUTE X_INTERFACE_INFO OF reset_s: SIGNAL IS "xilinx.com:signal:reset:1.0 reset_s RST";
  ATTRIBUTE X_INTERFACE_INFO OF uartA_rxd: SIGNAL IS "xilinx.com:interface:uart:1.0 uartA TxD";
  ATTRIBUTE X_INTERFACE_INFO OF uartA_txd: SIGNAL IS "xilinx.com:interface:uart:1.0 uartA RxD";
  ATTRIBUTE X_INTERFACE_INFO OF uartB_rxd: SIGNAL IS "xilinx.com:interface:uart:1.0 uartB TxD";
  ATTRIBUTE X_INTERFACE_INFO OF uartB_txd: SIGNAL IS "xilinx.com:interface:uart:1.0 uartB RxD";
BEGIN
  U0 : IP006_uart_reg32
    GENERIC MAP (
      inputs_g => 1,
      outputs_g => 1,
      core_clk_freq_g => 25000000,
      baudrate_g => 9600,
      simulate0_g => false,
      simulate1_g => false,
      commandfile_g => "command.txt",
      mbus_pipe_g => 1,
      use_vectors => false,
      reg_pipe_out_g => 0,
      reg_pipe_in_g => 0
    )
    PORT MAP (
      clk => clk,
      reg100 => reg100,
      reg101 => reg101,
      reg102 => reg102,
      reg103 => reg103,
      reg104 => reg104,
      reg105 => reg105,
      reg106 => reg106,
      reg107 => reg107,
      reg108 => reg108,
      reg109 => reg109,
      reg10A => reg10A,
      reg10B => reg10B,
      reg10C => reg10C,
      reg10D => reg10D,
      reg10E => reg10E,
      reg10F => reg10F,
      reg110 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg111 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg112 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg113 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg114 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg115 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg116 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg117 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg118 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg119 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg11A => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg11B => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg11C => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg11D => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg11E => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg11F => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg120 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg121 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg122 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg123 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg124 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg125 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg126 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg127 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg128 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg129 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg12A => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg12B => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg12C => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg12D => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg12E => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg12F => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg130 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg131 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg132 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg133 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg134 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg135 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg136 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg137 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg138 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg139 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg13A => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg13B => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg13C => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg13D => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg13E => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg13F => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg140 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg141 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg142 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg143 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg144 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg145 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg146 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg147 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg148 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg149 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg14A => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg14B => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg14C => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg14D => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg14E => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg14F => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg150 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg151 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg152 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg153 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg154 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg155 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg156 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg157 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg158 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg159 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg15A => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg15B => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg15C => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg15D => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg15E => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg15F => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg160 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg161 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg162 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg163 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg164 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg165 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg166 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg167 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg168 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg169 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg16A => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg16B => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg16C => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg16D => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg16E => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg16F => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg170 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg171 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg172 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg173 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg174 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg175 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg176 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg177 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg178 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg179 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg17A => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg17B => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg17C => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg17D => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg17E => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg17F => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg180 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg181 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg182 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg183 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg184 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg185 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg186 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg187 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg188 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg189 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg18A => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg18B => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg18C => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg18D => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg18E => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg18F => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg190 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg191 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg192 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg193 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg194 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg195 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg196 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg197 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg198 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg199 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg19A => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg19B => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg19C => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg19D => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg19E => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg19F => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1A0 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1A1 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1A2 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1A3 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1A4 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1A5 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1A6 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1A7 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1A8 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1A9 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1AA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1AB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1AC => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1AD => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1AE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1AF => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1B0 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1B1 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1B2 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1B3 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1B4 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1B5 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1B6 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1B7 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1B8 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1B9 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1BA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1BB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1BC => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1BD => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1BE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1BF => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1C0 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1C1 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1C2 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1C3 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1C4 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1C5 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1C6 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1C7 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1C8 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1C9 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1CA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1CB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1CC => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1CD => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1CE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1CF => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1D0 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1D1 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1D2 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1D3 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1D4 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1D5 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1D6 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1D7 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1D8 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1D9 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1DA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1DB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1DC => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1DD => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1DE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1DF => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1E0 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1E1 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1E2 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1E3 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1E4 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1E5 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1E6 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1E7 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1E8 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1E9 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1EA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1EB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1EC => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1ED => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1EE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1EF => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1F0 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1F1 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1F2 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1F3 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1F4 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1F5 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1F6 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1F7 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1F8 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1F9 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1FA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1FB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1FC => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1FD => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1FE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg1FF => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      reg_in0 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4096)),
      reg_in1 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4096)),
      reset_s => reset_s,
      uartA_rxd => uartA_rxd,
      uartB_rxd => uartB_rxd,
      input_read => input_read,
      output_read => output_read,
      output_written => output_written,
      reg000 => reg000,
      reg001 => reg001,
      reg002 => reg002,
      reg003 => reg003,
      reg004 => reg004,
      reg005 => reg005,
      reg006 => reg006,
      reg007 => reg007,
      reg008 => reg008,
      reg009 => reg009,
      reg00A => reg00A,
      reg00B => reg00B,
      reg00C => reg00C,
      reg00D => reg00D,
      reg00E => reg00E,
      reg00F => reg00F,
      uartA_txd => uartA_txd,
      uartB_txd => uartB_txd
    );
END IP006_uart_reg32_0_arch;
